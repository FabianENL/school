
labopdracht4_v3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031f5  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002dba  00000000  00000000  00003475  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000352  00000000  00000000  0000622f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00006584  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001758  00000000  00000000  000065b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003b  00000000  00000000  00007d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00007d4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ec:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  f0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0e 94 92 00 	call	0x124	; 0x124 <main>
 104:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <write>:
 */ 

#include <avr/io.h>

void write(int data){
	if(PORTA.OUTSET != data){
 10c:	20 91 05 04 	lds	r18, 0x0405	; 0x800405 <__TEXT_REGION_LENGTH__+0x7e0405>
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	28 17       	cp	r18, r24
 114:	39 07       	cpc	r19, r25
 116:	29 f0       	breq	.+10     	; 0x122 <write+0x16>
		PORTA.OUTCLR = 0xFF;
 118:	e0 e0       	ldi	r30, 0x00	; 0
 11a:	f4 e0       	ldi	r31, 0x04	; 4
 11c:	9f ef       	ldi	r25, 0xFF	; 255
 11e:	96 83       	std	Z+6, r25	; 0x06
		PORTA.OUTSET =  data;
 120:	85 83       	std	Z+5, r24	; 0x05
 122:	08 95       	ret

00000124 <main>:
	}
}

int main(void)
{
	PORTA.DIR = PORTA.DIR | 0xF0;
 124:	e0 e0       	ldi	r30, 0x00	; 0
 126:	f4 e0       	ldi	r31, 0x04	; 4
 128:	80 81       	ld	r24, Z
 12a:	80 6f       	ori	r24, 0xF0	; 240
 12c:	80 83       	st	Z, r24
	PORTF.DIR = PORTF.DIR | 0xC;
 12e:	e0 ea       	ldi	r30, 0xA0	; 160
 130:	f4 e0       	ldi	r31, 0x04	; 4
 132:	80 81       	ld	r24, Z
 134:	8c 60       	ori	r24, 0x0C	; 12
 136:	80 83       	st	Z, r24
	int counter;
	
    /* Replace with your application code */
    while (1) 
    {
		PORTF.OUTSET = PIN3_bm;
 138:	88 e0       	ldi	r24, 0x08	; 8
 13a:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7e04a5>
		counter = !(PORTE.IN & PIN3_bm) + !(PORTE.IN & PIN2_bm) + !(PORTE.IN & PIN1_bm);
 13e:	e0 e8       	ldi	r30, 0x80	; 128
 140:	f4 e0       	ldi	r31, 0x04	; 4
 142:	80 85       	ldd	r24, Z+8	; 0x08
 144:	86 95       	lsr	r24
 146:	86 95       	lsr	r24
 148:	86 95       	lsr	r24
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	89 27       	eor	r24, r25
 14e:	81 70       	andi	r24, 0x01	; 1
 150:	c8 2f       	mov	r28, r24
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	d8 2f       	mov	r29, r24
 156:	80 85       	ldd	r24, Z+8	; 0x08
 158:	86 95       	lsr	r24
 15a:	86 95       	lsr	r24
 15c:	89 27       	eor	r24, r25
 15e:	08 2f       	mov	r16, r24
 160:	01 70       	andi	r16, 0x01	; 1
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	9e 01       	movw	r18, r28
 166:	20 0f       	add	r18, r16
 168:	31 1f       	adc	r19, r17
 16a:	80 85       	ldd	r24, Z+8	; 0x08
 16c:	86 95       	lsr	r24
 16e:	98 27       	eor	r25, r24
 170:	90 fb       	bst	r25, 0
 172:	ee 24       	eor	r14, r14
 174:	e0 f8       	bld	r14, 0
 176:	f1 2c       	mov	r15, r1
 178:	c9 01       	movw	r24, r18
 17a:	8e 0d       	add	r24, r14
 17c:	9f 1d       	adc	r25, r15
		
		write(counter * 16);
 17e:	82 95       	swap	r24
 180:	92 95       	swap	r25
 182:	90 7f       	andi	r25, 0xF0	; 240
 184:	98 27       	eor	r25, r24
 186:	80 7f       	andi	r24, 0xF0	; 240
 188:	98 27       	eor	r25, r24
 18a:	0e 94 86 00 	call	0x10c	; 0x10c <write>
 18e:	d4 cf       	rjmp	.-88     	; 0x138 <main+0x14>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>

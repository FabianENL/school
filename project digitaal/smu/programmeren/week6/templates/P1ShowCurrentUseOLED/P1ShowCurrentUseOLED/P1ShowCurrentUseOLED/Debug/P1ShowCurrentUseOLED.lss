
P1ShowCurrentUseOLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00804000  00001708  0000179c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001708  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000040b  00804042  00804042  000017de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000183c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00001880  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006a06  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000341c  00000000  00000000  000084be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dc4  00000000  00000000  0000b8da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000874  00000000  00000000  0000d6a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002232  00000000  00000000  0000df14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003bee  00000000  00000000  00010146  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00013d34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a0 01 	jmp	0x340	; 0x340 <__ctors_end>
       4:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
       8:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
       c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      10:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      14:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      18:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      1c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      20:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      24:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      28:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      2c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      30:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      34:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      38:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      3c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      40:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      44:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      48:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      4c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      50:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      54:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      58:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      5c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      60:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      64:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      68:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      6c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      70:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      74:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      78:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      7c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      80:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      84:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      88:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      8c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      90:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      94:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      98:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      9c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      a0:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      a4:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      a8:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      ac:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      b0:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      b4:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      b8:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      bc:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      c0:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      c4:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      c8:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      cc:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      d0:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      d4:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      d8:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      dc:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      e0:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      e4:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      e8:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      ec:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      f0:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>

000000f4 <__trampolines_end>:
      f4:	63 64       	ori	r22, 0x43	; 67
      f6:	69 6e       	ori	r22, 0xE9	; 233
      f8:	6f 70       	andi	r22, 0x0F	; 15
      fa:	73 75       	andi	r23, 0x53	; 83
      fc:	78 58       	subi	r23, 0x88	; 136
      fe:	5b 00       	.word	0x005b	; ????

00000100 <Font5x8>:
     100:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
     110:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
     120:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
     130:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
     140:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
     150:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
     160:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
     170:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
     180:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
     190:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     1a0:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     1b0:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     1c0:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     1d0:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     1e0:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     1f0:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     200:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     210:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     220:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     230:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     240:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     250:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     260:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     270:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     280:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     290:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     2a0:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     2b0:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     2c0:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     2d0:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     2e0:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     2f0:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     300:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     310:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     320:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     330:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

00000340 <__ctors_end>:
     340:	11 24       	eor	r1, r1
     342:	1f be       	out	0x3f, r1	; 63
     344:	cf ef       	ldi	r28, 0xFF	; 255
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df e7       	ldi	r29, 0x7F	; 127
     34a:	de bf       	out	0x3e, r29	; 62

0000034c <__do_copy_data>:
     34c:	10 e4       	ldi	r17, 0x40	; 64
     34e:	a0 e0       	ldi	r26, 0x00	; 0
     350:	b0 e4       	ldi	r27, 0x40	; 64
     352:	e8 e0       	ldi	r30, 0x08	; 8
     354:	f7 e1       	ldi	r31, 0x17	; 23
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	0b bf       	out	0x3b, r16	; 59
     35a:	02 c0       	rjmp	.+4      	; 0x360 <__do_copy_data+0x14>
     35c:	07 90       	elpm	r0, Z+
     35e:	0d 92       	st	X+, r0
     360:	a2 34       	cpi	r26, 0x42	; 66
     362:	b1 07       	cpc	r27, r17
     364:	d9 f7       	brne	.-10     	; 0x35c <__do_copy_data+0x10>

00000366 <__do_clear_bss>:
     366:	24 e4       	ldi	r18, 0x44	; 68
     368:	a2 e4       	ldi	r26, 0x42	; 66
     36a:	b0 e4       	ldi	r27, 0x40	; 64
     36c:	01 c0       	rjmp	.+2      	; 0x370 <.do_clear_bss_start>

0000036e <.do_clear_bss_loop>:
     36e:	1d 92       	st	X+, r1

00000370 <.do_clear_bss_start>:
     370:	ad 34       	cpi	r26, 0x4D	; 77
     372:	b2 07       	cpc	r27, r18
     374:	e1 f7       	brne	.-8      	; 0x36e <.do_clear_bss_loop>
     376:	0e 94 0c 02 	call	0x418	; 0x418 <main>
     37a:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <_exit>

0000037e <__bad_interrupt>:
     37e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000382 <USART2_init>:

// USART2 is the port connected to the P1 port
void USART2_init(void)
{
	// AVR128DB48
	PORTF.DIRCLR = PIN5_bm;										/* set pin 5 of PORT B (RXd) as input*/
     382:	80 e2       	ldi	r24, 0x20	; 32
     384:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <__TEXT_REGION_LENGTH__+0x7e04a2>
	
	PORTMUX_USARTROUTEA |= 0x10;
     388:	e2 ee       	ldi	r30, 0xE2	; 226
     38a:	f5 e0       	ldi	r31, 0x05	; 5
     38c:	80 81       	ld	r24, Z
     38e:	80 61       	ori	r24, 0x10	; 16
     390:	80 83       	st	Z, r24

	if (dsmr == V2)
     392:	80 91 42 40 	lds	r24, 0x4042	; 0x804042 <__data_end>
     396:	90 91 43 40 	lds	r25, 0x4043	; 0x804043 <__data_end+0x1>
     39a:	89 2b       	or	r24, r25
     39c:	49 f4       	brne	.+18     	; 0x3b0 <USART2_init+0x2e>
	{
		USART2.BAUD = (uint16_t)(USART2_BAUD_RATE(9600));		/* set the baud rate*/
     39e:	e0 e4       	ldi	r30, 0x40	; 64
     3a0:	f8 e0       	ldi	r31, 0x08	; 8
     3a2:	8b e0       	ldi	r24, 0x0B	; 11
     3a4:	9a e1       	ldi	r25, 0x1A	; 26
     3a6:	80 87       	std	Z+8, r24	; 0x08
     3a8:	91 87       	std	Z+9, r25	; 0x09
		USART2.CTRLC = USART_PMODE1_bm | USART_CHSIZE1_bm;		/* set the data format to 7-bit, even parity*/
     3aa:	82 e2       	ldi	r24, 0x22	; 34
     3ac:	87 83       	std	Z+7, r24	; 0x07
     3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <USART2_init+0x3e>
	}
	else
	{
		USART2.BAUD = (uint16_t)(USART2_BAUD_RATE(115200));		/* set the baud rate*/
     3b0:	e0 e4       	ldi	r30, 0x40	; 64
     3b2:	f8 e0       	ldi	r31, 0x08	; 8
     3b4:	8c e2       	ldi	r24, 0x2C	; 44
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	80 87       	std	Z+8, r24	; 0x08
     3ba:	91 87       	std	Z+9, r25	; 0x09
		USART2.CTRLC = USART_CHSIZE1_bm | USART_CHSIZE0_bm;		/* set the data format to 8-bit, no parity*/
     3bc:	83 e0       	ldi	r24, 0x03	; 3
     3be:	87 83       	std	Z+7, r24	; 0x07
	}
	
	USART2.CTRLB |= USART_RXEN_bm;								/* enable receiver*/
     3c0:	e0 e4       	ldi	r30, 0x40	; 64
     3c2:	f8 e0       	ldi	r31, 0x08	; 8
     3c4:	86 81       	ldd	r24, Z+6	; 0x06
     3c6:	80 68       	ori	r24, 0x80	; 128
     3c8:	86 83       	std	Z+6, r24	; 0x06
     3ca:	08 95       	ret

000003cc <USART2_Read>:
}

uint8_t USART2_Read()
{
	while (!(USART2.STATUS & USART_RXCIF_bm));
     3cc:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7e0844>
     3d0:	88 23       	and	r24, r24
     3d2:	e4 f7       	brge	.-8      	; 0x3cc <USART2_Read>
	
	return USART2.RXDATAL;
     3d4:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x7e0840>
}
     3d8:	08 95       	ret

000003da <CLOCK_XOSCHF_crystal_init>:

void CLOCK_XOSCHF_crystal_init(void)
{
	/* Enable crystal oscillator with frequency range 16 MHz and 4K cycles start-up time */
	ccp_write_io((uint8_t *) &CLKCTRL.XOSCHFCTRLA, CLKCTRL_RUNSTDBY_bm
     3da:	65 ea       	ldi	r22, 0xA5	; 165
     3dc:	80 e8       	ldi	r24, 0x80	; 128
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <ccp_write_io>
				 | CLKCTRL_FRQRANGE_16M_gc
				 | CLKCTRL_SELHF_XTAL_gc
				 | CLKCTRL_ENABLE_bm);

	/* Confirm crystal oscillator start-up */
	while(!(CLKCTRL.MCLKSTATUS & CLKCTRL_EXTS_bm));
     3e4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     3e8:	84 ff       	sbrs	r24, 4
     3ea:	fc cf       	rjmp	.-8      	; 0x3e4 <CLOCK_XOSCHF_crystal_init+0xa>

	/* Clear Main Clock Prescaler */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, 0x00);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	81 e6       	ldi	r24, 0x61	; 97
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <ccp_write_io>

	/* Set the main clock to use XOSCHF as source, and enable the CLKOUT pin */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc | CLKCTRL_CLKOUT_bm);
     3f6:	63 e8       	ldi	r22, 0x83	; 131
     3f8:	80 e6       	ldi	r24, 0x60	; 96
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <ccp_write_io>

	/* Wait for system oscillator changing to complete */
	while(CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm);
     400:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     404:	80 fd       	sbrc	r24, 0
     406:	fc cf       	rjmp	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>

	/* Clear RUNSTDBY for power save during sleep */
	ccp_write_io((uint8_t *) &CLKCTRL.XOSCHFCTRLA, CLKCTRL.XOSCHFCTRLA & ~CLKCTRL_RUNSTDBY_bm);
     408:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     40c:	6f 77       	andi	r22, 0x7F	; 127
     40e:	80 e8       	ldi	r24, 0x80	; 128
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <ccp_write_io>
     416:	08 95       	ret

00000418 <main>:

	/* Change complete and the main clock is 16 MHz */
}

int main(void)
{
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	c8 56       	subi	r28, 0x68	; 104
     422:	d1 09       	sbc	r29, r1
     424:	cd bf       	out	0x3d, r28	; 61
     426:	de bf       	out	0x3e, r29	; 62
	uint8_t index = 0;
	char c;
	uint16_t counter = 0;
	char buffer[20];
	
	CLOCK_XOSCHF_crystal_init();
     428:	0e 94 ed 01 	call	0x3da	; 0x3da <CLOCK_XOSCHF_crystal_init>

	USART2_init();
     42c:	0e 94 c1 01 	call	0x382	; 0x382 <USART2_init>

	GLCD_Setup();
     430:	0e 94 85 03 	call	0x70a	; 0x70a <GLCD_Setup>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	48 e0       	ldi	r20, 0x08	; 8
     438:	65 e0       	ldi	r22, 0x05	; 5
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <GLCD_SetFont>
	GLCD_GotoXY(1, 1);
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <GLCD_GotoXY>
	
	if (dsmr == V2)
     44a:	80 91 42 40 	lds	r24, 0x4042	; 0x804042 <__data_end>
     44e:	90 91 43 40 	lds	r25, 0x4043	; 0x804043 <__data_end+0x1>
     452:	89 2b       	or	r24, r25
     454:	29 f4       	brne	.+10     	; 0x460 <main+0x48>
	{
		GLCD_PrintString("Decoding DSMR V2");
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e4       	ldi	r25, 0x40	; 64
     45a:	0e 94 20 05 	call	0xa40	; 0xa40 <GLCD_PrintString>
     45e:	04 c0       	rjmp	.+8      	; 0x468 <main+0x50>
	}
	else
	{
		GLCD_PrintString("Decoding DSMR V5");
     460:	81 e1       	ldi	r24, 0x11	; 17
     462:	90 e4       	ldi	r25, 0x40	; 64
     464:	0e 94 20 05 	call	0xa40	; 0xa40 <GLCD_PrintString>
	}

	GLCD_Render();
     468:	0e 94 4e 03 	call	0x69c	; 0x69c <GLCD_Render>
int main(void)
{
	char command[MAX_COMMAND_LEN];
	uint8_t index = 0;
	char c;
	uint16_t counter = 0;
     46c:	e1 2c       	mov	r14, r1
     46e:	f1 2c       	mov	r15, r1
     470:	10 e0       	ldi	r17, 0x00	; 0

    /* Replace with your application code */
    while (1) 
    {
		// echo received P1 data on USB port
		c = USART2_Read();
     472:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART2_Read>
		
		if(c != '\n' && c != '\r')
     476:	8a 30       	cpi	r24, 0x0A	; 10
     478:	81 f0       	breq	.+32     	; 0x49a <main+0x82>
     47a:	8d 30       	cpi	r24, 0x0D	; 13
     47c:	71 f0       	breq	.+28     	; 0x49a <main+0x82>
		{
			command[index++] = c;
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	91 0f       	add	r25, r17
     482:	e1 e0       	ldi	r30, 0x01	; 1
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	ec 0f       	add	r30, r28
     488:	fd 1f       	adc	r31, r29
     48a:	e1 0f       	add	r30, r17
     48c:	f1 1d       	adc	r31, r1
     48e:	80 83       	st	Z, r24
			if(index > MAX_COMMAND_LEN)
     490:	91 35       	cpi	r25, 0x51	; 81
     492:	10 f4       	brcc	.+4      	; 0x498 <main+0x80>
		// echo received P1 data on USB port
		c = USART2_Read();
		
		if(c != '\n' && c != '\r')
		{
			command[index++] = c;
     494:	19 2f       	mov	r17, r25
     496:	01 c0       	rjmp	.+2      	; 0x49a <main+0x82>
			if(index > MAX_COMMAND_LEN)
			{
				index = 0;
     498:	10 e0       	ldi	r17, 0x00	; 0
		    }
		}
		        
		if(c == '\n')
     49a:	8a 30       	cpi	r24, 0x0A	; 10
     49c:	51 f7       	brne	.-44     	; 0x472 <main+0x5a>
		{
			int kw, deckw;
			        
			command[index] = '\0';
     49e:	ce 01       	movw	r24, r28
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	fc 01       	movw	r30, r24
     4a4:	e1 0f       	add	r30, r17
     4a6:	f1 1d       	adc	r31, r1
     4a8:	10 82       	st	Z, r1
			index = 0;
			        
			if (sscanf(command, "1-0:1.7.0(%d.%d*kW)", &kw, &deckw) == 2)
     4aa:	9e 01       	movw	r18, r28
     4ac:	2b 59       	subi	r18, 0x9B	; 155
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
     4b0:	3f 93       	push	r19
     4b2:	2f 93       	push	r18
     4b4:	2e 5f       	subi	r18, 0xFE	; 254
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	3f 93       	push	r19
     4ba:	2f 93       	push	r18
     4bc:	22 e2       	ldi	r18, 0x22	; 34
     4be:	30 e4       	ldi	r19, 0x40	; 64
     4c0:	3f 93       	push	r19
     4c2:	2f 93       	push	r18
     4c4:	9f 93       	push	r25
     4c6:	8f 93       	push	r24
     4c8:	0e 94 60 05 	call	0xac0	; 0xac0 <sscanf>
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	02 97       	sbiw	r24, 0x02	; 2
     4d2:	71 f6       	brne	.-100    	; 0x470 <main+0x58>
			{
				if (dsmr == V2)
     4d4:	80 91 42 40 	lds	r24, 0x4042	; 0x804042 <__data_end>
     4d8:	90 91 43 40 	lds	r25, 0x4043	; 0x804043 <__data_end+0x1>
     4dc:	89 2b       	or	r24, r25
     4de:	99 f4       	brne	.+38     	; 0x506 <main+0xee>
				{
					// v2 is sending 2 digits after the '.', so 10 W accuracy
					deckw *= 10;
     4e0:	a7 96       	adiw	r28, 0x27	; 39
     4e2:	8e ad       	ldd	r24, Y+62	; 0x3e
     4e4:	9f ad       	ldd	r25, Y+63	; 0x3f
     4e6:	a7 97       	sbiw	r28, 0x27	; 39
     4e8:	9c 01       	movw	r18, r24
     4ea:	22 0f       	add	r18, r18
     4ec:	33 1f       	adc	r19, r19
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	88 0f       	add	r24, r24
     4f4:	99 1f       	adc	r25, r25
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	82 0f       	add	r24, r18
     4fc:	93 1f       	adc	r25, r19
     4fe:	a7 96       	adiw	r28, 0x27	; 39
     500:	8e af       	std	Y+62, r24	; 0x3e
     502:	9f af       	std	Y+63, r25	; 0x3f
     504:	a7 97       	sbiw	r28, 0x27	; 39
				}
				        
				sprintf(buffer, "%5d: %5d W", counter, kw * 1000 + deckw);
     506:	a9 96       	adiw	r28, 0x29	; 41
     508:	4e ad       	ldd	r20, Y+62	; 0x3e
     50a:	5f ad       	ldd	r21, Y+63	; 0x3f
     50c:	a9 97       	sbiw	r28, 0x29	; 41
     50e:	88 ee       	ldi	r24, 0xE8	; 232
     510:	93 e0       	ldi	r25, 0x03	; 3
     512:	48 9f       	mul	r20, r24
     514:	90 01       	movw	r18, r0
     516:	49 9f       	mul	r20, r25
     518:	30 0d       	add	r19, r0
     51a:	58 9f       	mul	r21, r24
     51c:	30 0d       	add	r19, r0
     51e:	11 24       	eor	r1, r1
     520:	a7 96       	adiw	r28, 0x27	; 39
     522:	8e ad       	ldd	r24, Y+62	; 0x3e
     524:	9f ad       	ldd	r25, Y+63	; 0x3f
     526:	a7 97       	sbiw	r28, 0x27	; 39
     528:	82 0f       	add	r24, r18
     52a:	93 1f       	adc	r25, r19
     52c:	9f 93       	push	r25
     52e:	8f 93       	push	r24
     530:	ff 92       	push	r15
     532:	ef 92       	push	r14
     534:	86 e3       	ldi	r24, 0x36	; 54
     536:	90 e4       	ldi	r25, 0x40	; 64
     538:	9f 93       	push	r25
     53a:	8f 93       	push	r24
     53c:	8e 01       	movw	r16, r28
     53e:	0f 5a       	subi	r16, 0xAF	; 175
     540:	1f 4f       	sbci	r17, 0xFF	; 255
     542:	1f 93       	push	r17
     544:	0f 93       	push	r16
     546:	0e 94 37 05 	call	0xa6e	; 0xa6e <sprintf>
				
		        GLCD_GotoXY(10, 30);
     54a:	6e e1       	ldi	r22, 0x1E	; 30
     54c:	8a e0       	ldi	r24, 0x0A	; 10
     54e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <GLCD_GotoXY>
		        GLCD_PrintString(buffer);
     552:	c8 01       	movw	r24, r16
     554:	0e 94 20 05 	call	0xa40	; 0xa40 <GLCD_PrintString>
		        GLCD_Render();
     558:	0e 94 4e 03 	call	0x69c	; 0x69c <GLCD_Render>
 
				counter++;
     55c:	3f ef       	ldi	r19, 0xFF	; 255
     55e:	e3 1a       	sub	r14, r19
     560:	f3 0a       	sbc	r15, r19
     562:	cd bf       	out	0x3d, r28	; 61
     564:	de bf       	out	0x3e, r29	; 62
     566:	84 cf       	rjmp	.-248    	; 0x470 <main+0x58>

00000568 <i2c_0_WaitW>:
                break;
        }
    }
	
    return retVal;
}
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     56e:	90 7c       	andi	r25, 0xC0	; 192
     570:	31 f0       	breq	.+12     	; 0x57e <i2c_0_WaitW+0x16>
     572:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     576:	84 fd       	sbrc	r24, 4
     578:	07 c0       	rjmp	.+14     	; 0x588 <i2c_0_WaitW+0x20>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	08 c0       	rjmp	.+16     	; 0x58e <i2c_0_WaitW+0x26>
     57e:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     582:	9c 70       	andi	r25, 0x0C	; 12
     584:	19 f4       	brne	.+6      	; 0x58c <i2c_0_WaitW+0x24>
     586:	03 c0       	rjmp	.+6      	; 0x58e <i2c_0_WaitW+0x26>
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	01 c0       	rjmp	.+2      	; 0x58e <i2c_0_WaitW+0x26>
     58c:	84 e0       	ldi	r24, 0x04	; 4
     58e:	88 23       	and	r24, r24
     590:	61 f3       	breq	.-40     	; 0x56a <i2c_0_WaitW+0x2>
     592:	08 95       	ret

00000594 <I2C_0_Init>:
     594:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <__TEXT_REGION_LENGTH__+0x7e05e5>
     598:	e0 e0       	ldi	r30, 0x00	; 0
     59a:	f9 e0       	ldi	r31, 0x09	; 9
     59c:	88 e4       	ldi	r24, 0x48	; 72
     59e:	86 83       	std	Z+6, r24	; 0x06
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	83 83       	std	Z+3, r24	; 0x03
     5a4:	17 82       	std	Z+7, r1	; 0x07
     5a6:	10 86       	std	Z+8, r1	; 0x08
     5a8:	85 83       	std	Z+5, r24	; 0x05
     5aa:	08 95       	ret

000005ac <I2C_0_SendData>:
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	c6 2f       	mov	r28, r22
     5b8:	8a 01       	movw	r16, r20
     5ba:	d2 2f       	mov	r29, r18
     5bc:	8e 7f       	andi	r24, 0xFE	; 254
     5be:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
     5c2:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_0_WaitW>
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	11 f5       	brne	.+68     	; 0x60e <I2C_0_SendData+0x62>
     5ca:	c0 93 08 09 	sts	0x0908, r28	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     5ce:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_0_WaitW>
     5d2:	81 30       	cpi	r24, 0x01	; 1
     5d4:	f1 f4       	brne	.+60     	; 0x612 <I2C_0_SendData+0x66>
     5d6:	dd 23       	and	r29, r29
     5d8:	f1 f0       	breq	.+60     	; 0x616 <I2C_0_SendData+0x6a>
     5da:	01 15       	cp	r16, r1
     5dc:	11 05       	cpc	r17, r1
     5de:	79 f4       	brne	.+30     	; 0x5fe <I2C_0_SendData+0x52>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	1c c0       	rjmp	.+56     	; 0x61c <I2C_0_SendData+0x70>
     5e4:	f8 01       	movw	r30, r16
     5e6:	80 81       	ld	r24, Z
     5e8:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     5ec:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_0_WaitW>
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	99 f4       	brne	.+38     	; 0x61a <I2C_0_SendData+0x6e>
     5f4:	cf 5f       	subi	r28, 0xFF	; 255
     5f6:	0f 5f       	subi	r16, 0xFF	; 255
     5f8:	1f 4f       	sbci	r17, 0xFF	; 255
     5fa:	df 2d       	mov	r29, r15
     5fc:	01 c0       	rjmp	.+2      	; 0x600 <I2C_0_SendData+0x54>
     5fe:	c0 e0       	ldi	r28, 0x00	; 0
     600:	ff 24       	eor	r15, r15
     602:	fa 94       	dec	r15
     604:	fd 0e       	add	r15, r29
     606:	d1 11       	cpse	r29, r1
     608:	ed cf       	rjmp	.-38     	; 0x5e4 <I2C_0_SendData+0x38>
     60a:	8c 2f       	mov	r24, r28
     60c:	07 c0       	rjmp	.+14     	; 0x61c <I2C_0_SendData+0x70>
     60e:	8f ef       	ldi	r24, 0xFF	; 255
     610:	05 c0       	rjmp	.+10     	; 0x61c <I2C_0_SendData+0x70>
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	03 c0       	rjmp	.+6      	; 0x61c <I2C_0_SendData+0x70>
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	01 c0       	rjmp	.+2      	; 0x61c <I2C_0_SendData+0x70>
     61a:	8c 2f       	mov	r24, r28
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	08 95       	ret

00000628 <I2C_0_EndSession>:

void I2C_0_EndSession(void)
{
    TWI0.MCTRLB = TWI_MCMD_STOP_gc;
     628:	83 e0       	ldi	r24, 0x03	; 3
     62a:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
     62e:	08 95       	ret

00000630 <GLCD_BufferWrite>:
		width += GLCD_GetWidthChar(r);
		r = pgm_read_byte(Text++);
	}
	
	return width;
}
     630:	66 95       	lsr	r22
     632:	66 95       	lsr	r22
     634:	66 95       	lsr	r22
     636:	e8 2f       	mov	r30, r24
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	80 e8       	ldi	r24, 0x80	; 128
     63c:	68 9f       	mul	r22, r24
     63e:	e0 0d       	add	r30, r0
     640:	f1 1d       	adc	r31, r1
     642:	11 24       	eor	r1, r1
     644:	e3 5b       	subi	r30, 0xB3	; 179
     646:	ff 4b       	sbci	r31, 0xBF	; 191
     648:	40 83       	st	Z, r20
     64a:	08 95       	ret

0000064c <GLCD_BufferRead>:
     64c:	66 95       	lsr	r22
     64e:	66 95       	lsr	r22
     650:	66 95       	lsr	r22
     652:	e8 2f       	mov	r30, r24
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	80 e8       	ldi	r24, 0x80	; 128
     658:	68 9f       	mul	r22, r24
     65a:	e0 0d       	add	r30, r0
     65c:	f1 1d       	adc	r31, r1
     65e:	11 24       	eor	r1, r1
     660:	e3 5b       	subi	r30, 0xB3	; 179
     662:	ff 4b       	sbci	r31, 0xBF	; 191
     664:	80 81       	ld	r24, Z
     666:	08 95       	ret

00000668 <GLCD_Send>:
     668:	24 2f       	mov	r18, r20
     66a:	ab 01       	movw	r20, r22
     66c:	68 2f       	mov	r22, r24
     66e:	88 e7       	ldi	r24, 0x78	; 120
     670:	0e 94 d6 02 	call	0x5ac	; 0x5ac <I2C_0_SendData>
     674:	0e 94 14 03 	call	0x628	; 0x628 <I2C_0_EndSession>
     678:	08 95       	ret

0000067a <GLCD_SendCommand>:
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	1f 92       	push	r1
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	89 83       	std	Y+1, r24	; 0x01
     686:	41 e0       	ldi	r20, 0x01	; 1
     688:	be 01       	movw	r22, r28
     68a:	6f 5f       	subi	r22, 0xFF	; 255
     68c:	7f 4f       	sbci	r23, 0xFF	; 255
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 34 03 	call	0x668	; 0x668 <GLCD_Send>
     694:	0f 90       	pop	r0
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	08 95       	ret

0000069c <GLCD_Render>:
     69c:	cf 93       	push	r28
     69e:	81 e2       	ldi	r24, 0x21	; 33
     6a0:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     6aa:	8f e7       	ldi	r24, 0x7F	; 127
     6ac:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     6b0:	82 e2       	ldi	r24, 0x22	; 34
     6b2:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     6bc:	87 e0       	ldi	r24, 0x07	; 7
     6be:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     6c2:	c0 e0       	ldi	r28, 0x00	; 0
     6c4:	0b c0       	rjmp	.+22     	; 0x6dc <GLCD_Render+0x40>
     6c6:	80 e1       	ldi	r24, 0x10	; 16
     6c8:	c8 9f       	mul	r28, r24
     6ca:	b0 01       	movw	r22, r0
     6cc:	11 24       	eor	r1, r1
     6ce:	63 5b       	subi	r22, 0xB3	; 179
     6d0:	7f 4b       	sbci	r23, 0xBF	; 191
     6d2:	40 e1       	ldi	r20, 0x10	; 16
     6d4:	80 e4       	ldi	r24, 0x40	; 64
     6d6:	0e 94 34 03 	call	0x668	; 0x668 <GLCD_Send>
     6da:	cf 5f       	subi	r28, 0xFF	; 255
     6dc:	c0 34       	cpi	r28, 0x40	; 64
     6de:	98 f3       	brcs	.-26     	; 0x6c6 <GLCD_Render+0x2a>
     6e0:	cf 91       	pop	r28
     6e2:	08 95       	ret

000006e4 <GLCD_GotoX>:
     6e4:	88 23       	and	r24, r24
     6e6:	14 f0       	brlt	.+4      	; 0x6ec <GLCD_GotoX+0x8>
     6e8:	80 93 44 40 	sts	0x4044, r24	; 0x804044 <__GLCD>
     6ec:	08 95       	ret

000006ee <GLCD_GotoY>:
     6ee:	80 34       	cpi	r24, 0x40	; 64
     6f0:	10 f4       	brcc	.+4      	; 0x6f6 <GLCD_GotoY+0x8>
     6f2:	80 93 45 40 	sts	0x4045, r24	; 0x804045 <__GLCD+0x1>
     6f6:	08 95       	ret

000006f8 <GLCD_GotoXY>:
     6f8:	cf 93       	push	r28
     6fa:	c6 2f       	mov	r28, r22
     6fc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <GLCD_GotoX>
     700:	8c 2f       	mov	r24, r28
     702:	0e 94 77 03 	call	0x6ee	; 0x6ee <GLCD_GotoY>
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <GLCD_Setup>:
     70a:	2f ef       	ldi	r18, 0xFF	; 255
     70c:	81 ee       	ldi	r24, 0xE1	; 225
     70e:	94 e0       	ldi	r25, 0x04	; 4
     710:	21 50       	subi	r18, 0x01	; 1
     712:	80 40       	sbci	r24, 0x00	; 0
     714:	90 40       	sbci	r25, 0x00	; 0
     716:	e1 f7       	brne	.-8      	; 0x710 <GLCD_Setup+0x6>
     718:	00 c0       	rjmp	.+0      	; 0x71a <GLCD_Setup+0x10>
     71a:	00 00       	nop
     71c:	0e 94 ca 02 	call	0x594	; 0x594 <I2C_0_Init>
     720:	8e ea       	ldi	r24, 0xAE	; 174
     722:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     726:	85 ed       	ldi	r24, 0xD5	; 213
     728:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     72c:	80 ef       	ldi	r24, 0xF0	; 240
     72e:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     732:	88 ea       	ldi	r24, 0xA8	; 168
     734:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     738:	8f e3       	ldi	r24, 0x3F	; 63
     73a:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     73e:	83 ed       	ldi	r24, 0xD3	; 211
     740:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     74a:	8d e8       	ldi	r24, 0x8D	; 141
     74c:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     750:	84 e1       	ldi	r24, 0x14	; 20
     752:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     756:	80 e4       	ldi	r24, 0x40	; 64
     758:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     75c:	80 e2       	ldi	r24, 0x20	; 32
     75e:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     768:	81 ea       	ldi	r24, 0xA1	; 161
     76a:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     76e:	88 ec       	ldi	r24, 0xC8	; 200
     770:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     774:	8a ed       	ldi	r24, 0xDA	; 218
     776:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     77a:	82 e1       	ldi	r24, 0x12	; 18
     77c:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     780:	81 e8       	ldi	r24, 0x81	; 129
     782:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     786:	8f ef       	ldi	r24, 0xFF	; 255
     788:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     78c:	89 ed       	ldi	r24, 0xD9	; 217
     78e:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     792:	81 ef       	ldi	r24, 0xF1	; 241
     794:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     798:	8b ed       	ldi	r24, 0xDB	; 219
     79a:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     79e:	80 e2       	ldi	r24, 0x20	; 32
     7a0:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     7a4:	84 ea       	ldi	r24, 0xA4	; 164
     7a6:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     7aa:	86 ea       	ldi	r24, 0xA6	; 166
     7ac:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     7b0:	8e e2       	ldi	r24, 0x2E	; 46
     7b2:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     7b6:	8f ea       	ldi	r24, 0xAF	; 175
     7b8:	0e 94 3d 03 	call	0x67a	; 0x67a <GLCD_SendCommand>
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <GLCD_GotoXY>
     7c4:	e4 e4       	ldi	r30, 0x44	; 68
     7c6:	f0 e4       	ldi	r31, 0x40	; 64
     7c8:	86 ea       	ldi	r24, 0xA6	; 166
     7ca:	82 83       	std	Z+2, r24	; 0x02
     7cc:	17 82       	std	Z+7, r1	; 0x07
     7ce:	16 82       	std	Z+6, r1	; 0x06
     7d0:	15 82       	std	Z+5, r1	; 0x05
     7d2:	11 82       	std	Z+1, r1	; 0x01
     7d4:	10 82       	st	Z, r1
     7d6:	08 95       	ret

000007d8 <GLCD_SetFont>:
     7d8:	66 23       	and	r22, r22
     7da:	e4 f0       	brlt	.+56     	; 0x814 <GLCD_SetFont+0x3c>
     7dc:	40 34       	cpi	r20, 0x40	; 64
     7de:	d0 f4       	brcc	.+52     	; 0x814 <GLCD_SetFont+0x3c>
     7e0:	22 30       	cpi	r18, 0x02	; 2
     7e2:	c0 f4       	brcc	.+48     	; 0x814 <GLCD_SetFont+0x3c>
     7e4:	e4 e4       	ldi	r30, 0x44	; 68
     7e6:	f0 e4       	ldi	r31, 0x40	; 64
     7e8:	83 83       	std	Z+3, r24	; 0x03
     7ea:	94 83       	std	Z+4, r25	; 0x04
     7ec:	65 83       	std	Z+5, r22	; 0x05
     7ee:	46 83       	std	Z+6, r20	; 0x06
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	41 50       	subi	r20, 0x01	; 1
     7f4:	51 09       	sbc	r21, r1
     7f6:	ca 01       	movw	r24, r20
     7f8:	99 23       	and	r25, r25
     7fa:	0c f4       	brge	.+2      	; 0x7fe <GLCD_SetFont+0x26>
     7fc:	07 96       	adiw	r24, 0x07	; 7
     7fe:	95 95       	asr	r25
     800:	87 95       	ror	r24
     802:	95 95       	asr	r25
     804:	87 95       	ror	r24
     806:	95 95       	asr	r25
     808:	87 95       	ror	r24
     80a:	e4 e4       	ldi	r30, 0x44	; 68
     80c:	f0 e4       	ldi	r31, 0x40	; 64
     80e:	8f 5f       	subi	r24, 0xFF	; 255
     810:	87 83       	std	Z+7, r24	; 0x07
     812:	20 87       	std	Z+8, r18	; 0x08
     814:	08 95       	ret

00000816 <GLCD_PrintChar>:

void GLCD_PrintChar(char Character)
{
     816:	4f 92       	push	r4
     818:	5f 92       	push	r5
     81a:	6f 92       	push	r6
     81c:	7f 92       	push	r7
     81e:	8f 92       	push	r8
     820:	9f 92       	push	r9
     822:	af 92       	push	r10
     824:	bf 92       	push	r11
     826:	cf 92       	push	r12
     828:	df 92       	push	r13
     82a:	ef 92       	push	r14
     82c:	ff 92       	push	r15
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
     836:	a4 e4       	ldi	r26, 0x44	; 68
     838:	b0 e4       	ldi	r27, 0x40	; 64
     83a:	5c 90       	ld	r5, X
	y = y2 = __GLCD.Y;
     83c:	11 96       	adiw	r26, 0x01	; 1
     83e:	4c 90       	ld	r4, X
     840:	11 97       	sbiw	r26, 0x01	; 1
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
     842:	80 52       	subi	r24, 0x20	; 32
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
     844:	15 96       	adiw	r26, 0x05	; 5
     846:	9c 91       	ld	r25, X
     848:	15 97       	sbiw	r26, 0x05	; 5
     84a:	17 96       	adiw	r26, 0x07	; 7
     84c:	2c 91       	ld	r18, X
     84e:	17 97       	sbiw	r26, 0x07	; 7
     850:	92 9f       	mul	r25, r18
     852:	90 01       	movw	r18, r0
     854:	11 24       	eor	r1, r1
     856:	2f 5f       	subi	r18, 0xFF	; 255
     858:	3f 4f       	sbci	r19, 0xFF	; 255
     85a:	82 9f       	mul	r24, r18
     85c:	a0 01       	movw	r20, r0
     85e:	83 9f       	mul	r24, r19
     860:	50 0d       	add	r21, r0
     862:	11 24       	eor	r1, r1
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
     864:	13 96       	adiw	r26, 0x03	; 3
     866:	ed 91       	ld	r30, X+
     868:	fc 91       	ld	r31, X
     86a:	14 97       	sbiw	r26, 0x04	; 4
     86c:	5a 01       	movw	r10, r20
     86e:	8f ef       	ldi	r24, 0xFF	; 255
     870:	a8 1a       	sub	r10, r24
     872:	b8 0a       	sbc	r11, r24
     874:	e4 0f       	add	r30, r20
     876:	f5 1f       	adc	r31, r21
     878:	74 90       	lpm	r7, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
     87a:	84 2d       	mov	r24, r4
     87c:	87 70       	andi	r24, 0x07	; 7
     87e:	98 2e       	mov	r9, r24
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
     880:	64 2c       	mov	r6, r4
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
     882:	81 2c       	mov	r8, r1
     884:	5f c0       	rjmp	.+190    	; 0x944 <GLCD_PrintChar+0x12e>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
     886:	66 2d       	mov	r22, r6
     888:	85 2d       	mov	r24, r5
     88a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
     88e:	75 01       	movw	r14, r10
     890:	e8 0c       	add	r14, r8
     892:	f1 1c       	adc	r15, r1
		fontReadPrev = fontRead - 1;
     894:	67 01       	movw	r12, r14
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	c8 1a       	sub	r12, r24
     89a:	d1 08       	sbc	r13, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
     89c:	10 e0       	ldi	r17, 0x00	; 0
     89e:	41 c0       	rjmp	.+130    	; 0x922 <GLCD_PrintChar+0x10c>
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
     8a0:	80 91 47 40 	lds	r24, 0x4047	; 0x804047 <__GLCD+0x3>
     8a4:	90 91 48 40 	lds	r25, 0x4048	; 0x804048 <__GLCD+0x4>
     8a8:	fc 01       	movw	r30, r24
     8aa:	ee 0d       	add	r30, r14
     8ac:	ff 1d       	adc	r31, r15
     8ae:	24 91       	lpm	r18, Z
			
			//Shift byte
			data <<= overflow;
     8b0:	49 2d       	mov	r20, r9
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	09 2c       	mov	r0, r9
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <GLCD_PrintChar+0xa8>
     8ba:	22 0f       	add	r18, r18
     8bc:	33 1f       	adc	r19, r19
     8be:	0a 94       	dec	r0
     8c0:	e2 f7       	brpl	.-8      	; 0x8ba <GLCD_PrintChar+0xa4>
     8c2:	02 2f       	mov	r16, r18
			
			//Merge byte with previous one
			if (j > 0)
     8c4:	88 20       	and	r8, r8
     8c6:	a1 f0       	breq	.+40     	; 0x8f0 <GLCD_PrintChar+0xda>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
     8c8:	fc 01       	movw	r30, r24
     8ca:	ec 0d       	add	r30, r12
     8cc:	fd 1d       	adc	r31, r13
     8ce:	e4 91       	lpm	r30, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
     8d0:	88 e0       	ldi	r24, 0x08	; 8
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	84 1b       	sub	r24, r20
     8d6:	95 0b       	sbc	r25, r21
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <GLCD_PrintChar+0xca>
     8dc:	f5 95       	asr	r31
     8de:	e7 95       	ror	r30
     8e0:	8a 95       	dec	r24
     8e2:	e2 f7       	brpl	.-8      	; 0x8dc <GLCD_PrintChar+0xc6>
				data |= dataPrev;
     8e4:	0e 2f       	mov	r16, r30
     8e6:	02 2b       	or	r16, r18
				fontReadPrev += __GLCD.Font.Lines;
     8e8:	80 91 4b 40 	lds	r24, 0x404B	; 0x80404b <__GLCD+0x7>
     8ec:	c8 0e       	add	r12, r24
     8ee:	d1 1c       	adc	r13, r1
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
     8f0:	80 91 4c 40 	lds	r24, 0x404C	; 0x80404c <__GLCD+0x8>
     8f4:	81 30       	cpi	r24, 0x01	; 1
     8f6:	39 f4       	brne	.+14     	; 0x906 <GLCD_PrintChar+0xf0>
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
     8f8:	e4 e4       	ldi	r30, 0x44	; 68
     8fa:	f0 e4       	ldi	r31, 0x40	; 64
     8fc:	61 81       	ldd	r22, Z+1	; 0x01
     8fe:	80 81       	ld	r24, Z
     900:	0e 94 26 03 	call	0x64c	; 0x64c <GLCD_BufferRead>
     904:	08 2b       	or	r16, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
     906:	c4 e4       	ldi	r28, 0x44	; 68
     908:	d0 e4       	ldi	r29, 0x40	; 64
     90a:	69 81       	ldd	r22, Y+1	; 0x01
     90c:	88 81       	ld	r24, Y
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	98 0f       	add	r25, r24
     912:	98 83       	st	Y, r25
     914:	40 2f       	mov	r20, r16
     916:	0e 94 18 03 	call	0x630	; 0x630 <GLCD_BufferWrite>
			
			//Increase index
			fontRead += __GLCD.Font.Lines;
     91a:	8f 81       	ldd	r24, Y+7	; 0x07
     91c:	e8 0e       	add	r14, r24
     91e:	f1 1c       	adc	r15, r1
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
     920:	1f 5f       	subi	r17, 0xFF	; 255
     922:	17 15       	cp	r17, r7
     924:	08 f4       	brcc	.+2      	; 0x928 <GLCD_PrintChar+0x112>
     926:	bc cf       	rjmp	.-136    	; 0x8a0 <GLCD_PrintChar+0x8a>
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
     928:	80 91 4c 40 	lds	r24, 0x404C	; 0x80404c <__GLCD+0x8>
     92c:	81 11       	cpse	r24, r1
     92e:	07 c0       	rjmp	.+14     	; 0x93e <GLCD_PrintChar+0x128>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
     930:	e4 e4       	ldi	r30, 0x44	; 68
     932:	f0 e4       	ldi	r31, 0x40	; 64
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	61 81       	ldd	r22, Z+1	; 0x01
     938:	80 81       	ld	r24, Z
     93a:	0e 94 18 03 	call	0x630	; 0x630 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
     93e:	88 e0       	ldi	r24, 0x08	; 8
     940:	68 0e       	add	r6, r24
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
     942:	83 94       	inc	r8
     944:	80 91 4b 40 	lds	r24, 0x404B	; 0x80404b <__GLCD+0x7>
     948:	88 16       	cp	r8, r24
     94a:	08 f4       	brcc	.+2      	; 0x94e <GLCD_PrintChar+0x138>
     94c:	9c cf       	rjmp	.-200    	; 0x886 <GLCD_PrintChar+0x70>
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_GetLine(y2) != __GLCD_GetLine((y2 + __GLCD.Font.Height - 1)) && y < __GLCD_Screen_Height)
     94e:	24 2d       	mov	r18, r4
     950:	26 95       	lsr	r18
     952:	26 95       	lsr	r18
     954:	26 95       	lsr	r18
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	80 91 4a 40 	lds	r24, 0x404A	; 0x80404a <__GLCD+0x6>
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	84 0d       	add	r24, r4
     960:	91 1d       	adc	r25, r1
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	ac 01       	movw	r20, r24
     966:	12 f4       	brpl	.+4      	; 0x96c <GLCD_PrintChar+0x156>
     968:	49 5f       	subi	r20, 0xF9	; 249
     96a:	5f 4f       	sbci	r21, 0xFF	; 255
     96c:	55 95       	asr	r21
     96e:	47 95       	ror	r20
     970:	55 95       	asr	r21
     972:	47 95       	ror	r20
     974:	55 95       	asr	r21
     976:	47 95       	ror	r20
     978:	24 17       	cp	r18, r20
     97a:	35 07       	cpc	r19, r21
     97c:	09 f4       	brne	.+2      	; 0x980 <GLCD_PrintChar+0x16a>
     97e:	49 c0       	rjmp	.+146    	; 0xa12 <GLCD_PrintChar+0x1fc>
     980:	8f e3       	ldi	r24, 0x3F	; 63
     982:	86 15       	cp	r24, r6
     984:	08 f4       	brcc	.+2      	; 0x988 <GLCD_PrintChar+0x172>
     986:	45 c0       	rjmp	.+138    	; 0xa12 <GLCD_PrintChar+0x1fc>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
     988:	66 2d       	mov	r22, r6
     98a:	85 2d       	mov	r24, r5
     98c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
     990:	a8 0c       	add	r10, r8
     992:	b1 1c       	adc	r11, r1
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	a8 1a       	sub	r10, r24
     998:	b1 08       	sbc	r11, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
     99a:	10 e0       	ldi	r17, 0x00	; 0
     99c:	2d c0       	rjmp	.+90     	; 0x9f8 <GLCD_PrintChar+0x1e2>
		{
			//Read byte
			data = 0; // JK: reading old buffer data gives font mess: removed line data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
     99e:	a4 e4       	ldi	r26, 0x44	; 68
     9a0:	b0 e4       	ldi	r27, 0x40	; 64
     9a2:	13 96       	adiw	r26, 0x03	; 3
     9a4:	ed 91       	ld	r30, X+
     9a6:	fc 91       	ld	r31, X
     9a8:	14 97       	sbiw	r26, 0x04	; 4
     9aa:	ea 0d       	add	r30, r10
     9ac:	fb 1d       	adc	r31, r11
     9ae:	c4 91       	lpm	r28, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	89 19       	sub	r24, r9
     9b6:	91 09       	sbc	r25, r1
     9b8:	d0 e0       	ldi	r29, 0x00	; 0
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <GLCD_PrintChar+0x1aa>
     9bc:	d5 95       	asr	r29
     9be:	c7 95       	ror	r28
     9c0:	8a 95       	dec	r24
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <GLCD_PrintChar+0x1a6>
     9c4:	4c 2f       	mov	r20, r28
			data |= dataPrev;
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
     9c6:	18 96       	adiw	r26, 0x08	; 8
     9c8:	8c 91       	ld	r24, X
     9ca:	18 97       	sbiw	r26, 0x08	; 8
     9cc:	81 30       	cpi	r24, 0x01	; 1
     9ce:	39 f4       	brne	.+14     	; 0x9de <GLCD_PrintChar+0x1c8>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
     9d0:	fd 01       	movw	r30, r26
     9d2:	61 81       	ldd	r22, Z+1	; 0x01
     9d4:	80 81       	ld	r24, Z
     9d6:	0e 94 26 03 	call	0x64c	; 0x64c <GLCD_BufferRead>
     9da:	4c 2f       	mov	r20, r28
     9dc:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
     9de:	c4 e4       	ldi	r28, 0x44	; 68
     9e0:	d0 e4       	ldi	r29, 0x40	; 64
     9e2:	69 81       	ldd	r22, Y+1	; 0x01
     9e4:	88 81       	ld	r24, Y
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	98 0f       	add	r25, r24
     9ea:	98 83       	st	Y, r25
     9ec:	0e 94 18 03 	call	0x630	; 0x630 <GLCD_BufferWrite>

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
     9f0:	8f 81       	ldd	r24, Y+7	; 0x07
     9f2:	a8 0e       	add	r10, r24
     9f4:	b1 1c       	adc	r11, r1
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
     9f6:	1f 5f       	subi	r17, 0xFF	; 255
     9f8:	17 15       	cp	r17, r7
     9fa:	88 f2       	brcs	.-94     	; 0x99e <GLCD_PrintChar+0x188>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
     9fc:	80 91 4c 40 	lds	r24, 0x404C	; 0x80404c <__GLCD+0x8>
     a00:	81 11       	cpse	r24, r1
     a02:	07 c0       	rjmp	.+14     	; 0xa12 <GLCD_PrintChar+0x1fc>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
     a04:	e4 e4       	ldi	r30, 0x44	; 68
     a06:	f0 e4       	ldi	r31, 0x40	; 64
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	61 81       	ldd	r22, Z+1	; 0x01
     a0c:	80 81       	ld	r24, Z
     a0e:	0e 94 18 03 	call	0x630	; 0x630 <GLCD_BufferWrite>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
     a12:	85 2d       	mov	r24, r5
     a14:	87 0d       	add	r24, r7
     a16:	64 2d       	mov	r22, r4
     a18:	8f 5f       	subi	r24, 0xFF	; 255
     a1a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <GLCD_GotoXY>
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	df 90       	pop	r13
     a2c:	cf 90       	pop	r12
     a2e:	bf 90       	pop	r11
     a30:	af 90       	pop	r10
     a32:	9f 90       	pop	r9
     a34:	8f 90       	pop	r8
     a36:	7f 90       	pop	r7
     a38:	6f 90       	pop	r6
     a3a:	5f 90       	pop	r5
     a3c:	4f 90       	pop	r4
     a3e:	08 95       	ret

00000a40 <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	ec 01       	movw	r28, r24
	while(*Text)
     a46:	0d c0       	rjmp	.+26     	; 0xa62 <GLCD_PrintString+0x22>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
     a48:	e4 e4       	ldi	r30, 0x44	; 68
     a4a:	f0 e4       	ldi	r31, 0x40	; 64
     a4c:	90 81       	ld	r25, Z
     a4e:	25 81       	ldd	r18, Z+5	; 0x05
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	29 0f       	add	r18, r25
     a54:	31 1d       	adc	r19, r1
     a56:	20 38       	cpi	r18, 0x80	; 128
     a58:	31 05       	cpc	r19, r1
     a5a:	34 f4       	brge	.+12     	; 0xa68 <GLCD_PrintString+0x28>
			break;

		GLCD_PrintChar(*Text++);
     a5c:	21 96       	adiw	r28, 0x01	; 1
     a5e:	0e 94 0b 04 	call	0x816	; 0x816 <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
     a62:	88 81       	ld	r24, Y
     a64:	81 11       	cpse	r24, r1
     a66:	f0 cf       	rjmp	.-32     	; 0xa48 <GLCD_PrintString+0x8>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <sprintf>:
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
     a7a:	2e 97       	sbiw	r28, 0x0e	; 14
     a7c:	cd bf       	out	0x3d, r28	; 61
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0d 89       	ldd	r16, Y+21	; 0x15
     a82:	1e 89       	ldd	r17, Y+22	; 0x16
     a84:	86 e0       	ldi	r24, 0x06	; 6
     a86:	8c 83       	std	Y+4, r24	; 0x04
     a88:	09 83       	std	Y+1, r16	; 0x01
     a8a:	1a 83       	std	Y+2, r17	; 0x02
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	9f e7       	ldi	r25, 0x7F	; 127
     a90:	8d 83       	std	Y+5, r24	; 0x05
     a92:	9e 83       	std	Y+6, r25	; 0x06
     a94:	ae 01       	movw	r20, r28
     a96:	47 5e       	subi	r20, 0xE7	; 231
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	6f 89       	ldd	r22, Y+23	; 0x17
     a9c:	78 8d       	ldd	r23, Y+24	; 0x18
     a9e:	ce 01       	movw	r24, r28
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vfprintf>
     aa6:	ef 81       	ldd	r30, Y+7	; 0x07
     aa8:	f8 85       	ldd	r31, Y+8	; 0x08
     aaa:	e0 0f       	add	r30, r16
     aac:	f1 1f       	adc	r31, r17
     aae:	10 82       	st	Z, r1
     ab0:	2e 96       	adiw	r28, 0x0e	; 14
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	08 95       	ret

00000ac0 <sscanf>:
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	2e 97       	sbiw	r28, 0x0e	; 14
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	85 e0       	ldi	r24, 0x05	; 5
     ad0:	8c 83       	std	Y+4, r24	; 0x04
     ad2:	8b 89       	ldd	r24, Y+19	; 0x13
     ad4:	9c 89       	ldd	r25, Y+20	; 0x14
     ad6:	89 83       	std	Y+1, r24	; 0x01
     ad8:	9a 83       	std	Y+2, r25	; 0x02
     ada:	ae 01       	movw	r20, r28
     adc:	49 5e       	subi	r20, 0xE9	; 233
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	6d 89       	ldd	r22, Y+21	; 0x15
     ae2:	7e 89       	ldd	r23, Y+22	; 0x16
     ae4:	ce 01       	movw	r24, r28
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	0e 94 39 09 	call	0x1272	; 0x1272 <vfscanf>
     aec:	2e 96       	adiw	r28, 0x0e	; 14
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <vfprintf>:
     af8:	2f 92       	push	r2
     afa:	3f 92       	push	r3
     afc:	4f 92       	push	r4
     afe:	5f 92       	push	r5
     b00:	6f 92       	push	r6
     b02:	7f 92       	push	r7
     b04:	8f 92       	push	r8
     b06:	9f 92       	push	r9
     b08:	af 92       	push	r10
     b0a:	bf 92       	push	r11
     b0c:	cf 92       	push	r12
     b0e:	df 92       	push	r13
     b10:	ef 92       	push	r14
     b12:	ff 92       	push	r15
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	2b 97       	sbiw	r28, 0x0b	; 11
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	6c 01       	movw	r12, r24
     b28:	7b 01       	movw	r14, r22
     b2a:	8a 01       	movw	r16, r20
     b2c:	fc 01       	movw	r30, r24
     b2e:	16 82       	std	Z+6, r1	; 0x06
     b30:	17 82       	std	Z+7, r1	; 0x07
     b32:	83 81       	ldd	r24, Z+3	; 0x03
     b34:	81 ff       	sbrs	r24, 1
     b36:	cc c1       	rjmp	.+920    	; 0xed0 <vfprintf+0x3d8>
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	3c 01       	movw	r6, r24
     b3e:	f6 01       	movw	r30, r12
     b40:	93 81       	ldd	r25, Z+3	; 0x03
     b42:	f7 01       	movw	r30, r14
     b44:	93 fd       	sbrc	r25, 3
     b46:	85 91       	lpm	r24, Z+
     b48:	93 ff       	sbrs	r25, 3
     b4a:	81 91       	ld	r24, Z+
     b4c:	7f 01       	movw	r14, r30
     b4e:	88 23       	and	r24, r24
     b50:	09 f4       	brne	.+2      	; 0xb54 <vfprintf+0x5c>
     b52:	ba c1       	rjmp	.+884    	; 0xec8 <vfprintf+0x3d0>
     b54:	85 32       	cpi	r24, 0x25	; 37
     b56:	39 f4       	brne	.+14     	; 0xb66 <vfprintf+0x6e>
     b58:	93 fd       	sbrc	r25, 3
     b5a:	85 91       	lpm	r24, Z+
     b5c:	93 ff       	sbrs	r25, 3
     b5e:	81 91       	ld	r24, Z+
     b60:	7f 01       	movw	r14, r30
     b62:	85 32       	cpi	r24, 0x25	; 37
     b64:	29 f4       	brne	.+10     	; 0xb70 <vfprintf+0x78>
     b66:	b6 01       	movw	r22, r12
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
     b6e:	e7 cf       	rjmp	.-50     	; 0xb3e <vfprintf+0x46>
     b70:	91 2c       	mov	r9, r1
     b72:	21 2c       	mov	r2, r1
     b74:	31 2c       	mov	r3, r1
     b76:	ff e1       	ldi	r31, 0x1F	; 31
     b78:	f3 15       	cp	r31, r3
     b7a:	d8 f0       	brcs	.+54     	; 0xbb2 <vfprintf+0xba>
     b7c:	8b 32       	cpi	r24, 0x2B	; 43
     b7e:	79 f0       	breq	.+30     	; 0xb9e <vfprintf+0xa6>
     b80:	38 f4       	brcc	.+14     	; 0xb90 <vfprintf+0x98>
     b82:	80 32       	cpi	r24, 0x20	; 32
     b84:	79 f0       	breq	.+30     	; 0xba4 <vfprintf+0xac>
     b86:	83 32       	cpi	r24, 0x23	; 35
     b88:	a1 f4       	brne	.+40     	; 0xbb2 <vfprintf+0xba>
     b8a:	23 2d       	mov	r18, r3
     b8c:	20 61       	ori	r18, 0x10	; 16
     b8e:	1d c0       	rjmp	.+58     	; 0xbca <vfprintf+0xd2>
     b90:	8d 32       	cpi	r24, 0x2D	; 45
     b92:	61 f0       	breq	.+24     	; 0xbac <vfprintf+0xb4>
     b94:	80 33       	cpi	r24, 0x30	; 48
     b96:	69 f4       	brne	.+26     	; 0xbb2 <vfprintf+0xba>
     b98:	23 2d       	mov	r18, r3
     b9a:	21 60       	ori	r18, 0x01	; 1
     b9c:	16 c0       	rjmp	.+44     	; 0xbca <vfprintf+0xd2>
     b9e:	83 2d       	mov	r24, r3
     ba0:	82 60       	ori	r24, 0x02	; 2
     ba2:	38 2e       	mov	r3, r24
     ba4:	e3 2d       	mov	r30, r3
     ba6:	e4 60       	ori	r30, 0x04	; 4
     ba8:	3e 2e       	mov	r3, r30
     baa:	2a c0       	rjmp	.+84     	; 0xc00 <vfprintf+0x108>
     bac:	f3 2d       	mov	r31, r3
     bae:	f8 60       	ori	r31, 0x08	; 8
     bb0:	1d c0       	rjmp	.+58     	; 0xbec <vfprintf+0xf4>
     bb2:	37 fc       	sbrc	r3, 7
     bb4:	2d c0       	rjmp	.+90     	; 0xc10 <vfprintf+0x118>
     bb6:	20 ed       	ldi	r18, 0xD0	; 208
     bb8:	28 0f       	add	r18, r24
     bba:	2a 30       	cpi	r18, 0x0A	; 10
     bbc:	40 f0       	brcs	.+16     	; 0xbce <vfprintf+0xd6>
     bbe:	8e 32       	cpi	r24, 0x2E	; 46
     bc0:	b9 f4       	brne	.+46     	; 0xbf0 <vfprintf+0xf8>
     bc2:	36 fc       	sbrc	r3, 6
     bc4:	81 c1       	rjmp	.+770    	; 0xec8 <vfprintf+0x3d0>
     bc6:	23 2d       	mov	r18, r3
     bc8:	20 64       	ori	r18, 0x40	; 64
     bca:	32 2e       	mov	r3, r18
     bcc:	19 c0       	rjmp	.+50     	; 0xc00 <vfprintf+0x108>
     bce:	36 fe       	sbrs	r3, 6
     bd0:	06 c0       	rjmp	.+12     	; 0xbde <vfprintf+0xe6>
     bd2:	8a e0       	ldi	r24, 0x0A	; 10
     bd4:	98 9e       	mul	r9, r24
     bd6:	20 0d       	add	r18, r0
     bd8:	11 24       	eor	r1, r1
     bda:	92 2e       	mov	r9, r18
     bdc:	11 c0       	rjmp	.+34     	; 0xc00 <vfprintf+0x108>
     bde:	ea e0       	ldi	r30, 0x0A	; 10
     be0:	2e 9e       	mul	r2, r30
     be2:	20 0d       	add	r18, r0
     be4:	11 24       	eor	r1, r1
     be6:	22 2e       	mov	r2, r18
     be8:	f3 2d       	mov	r31, r3
     bea:	f0 62       	ori	r31, 0x20	; 32
     bec:	3f 2e       	mov	r3, r31
     bee:	08 c0       	rjmp	.+16     	; 0xc00 <vfprintf+0x108>
     bf0:	8c 36       	cpi	r24, 0x6C	; 108
     bf2:	21 f4       	brne	.+8      	; 0xbfc <vfprintf+0x104>
     bf4:	83 2d       	mov	r24, r3
     bf6:	80 68       	ori	r24, 0x80	; 128
     bf8:	38 2e       	mov	r3, r24
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <vfprintf+0x108>
     bfc:	88 36       	cpi	r24, 0x68	; 104
     bfe:	41 f4       	brne	.+16     	; 0xc10 <vfprintf+0x118>
     c00:	f7 01       	movw	r30, r14
     c02:	93 fd       	sbrc	r25, 3
     c04:	85 91       	lpm	r24, Z+
     c06:	93 ff       	sbrs	r25, 3
     c08:	81 91       	ld	r24, Z+
     c0a:	7f 01       	movw	r14, r30
     c0c:	81 11       	cpse	r24, r1
     c0e:	b3 cf       	rjmp	.-154    	; 0xb76 <vfprintf+0x7e>
     c10:	98 2f       	mov	r25, r24
     c12:	9f 7d       	andi	r25, 0xDF	; 223
     c14:	95 54       	subi	r25, 0x45	; 69
     c16:	93 30       	cpi	r25, 0x03	; 3
     c18:	28 f4       	brcc	.+10     	; 0xc24 <vfprintf+0x12c>
     c1a:	0c 5f       	subi	r16, 0xFC	; 252
     c1c:	1f 4f       	sbci	r17, 0xFF	; 255
     c1e:	9f e3       	ldi	r25, 0x3F	; 63
     c20:	99 83       	std	Y+1, r25	; 0x01
     c22:	0d c0       	rjmp	.+26     	; 0xc3e <vfprintf+0x146>
     c24:	83 36       	cpi	r24, 0x63	; 99
     c26:	31 f0       	breq	.+12     	; 0xc34 <vfprintf+0x13c>
     c28:	83 37       	cpi	r24, 0x73	; 115
     c2a:	71 f0       	breq	.+28     	; 0xc48 <vfprintf+0x150>
     c2c:	83 35       	cpi	r24, 0x53	; 83
     c2e:	09 f0       	breq	.+2      	; 0xc32 <vfprintf+0x13a>
     c30:	59 c0       	rjmp	.+178    	; 0xce4 <vfprintf+0x1ec>
     c32:	21 c0       	rjmp	.+66     	; 0xc76 <vfprintf+0x17e>
     c34:	f8 01       	movw	r30, r16
     c36:	80 81       	ld	r24, Z
     c38:	89 83       	std	Y+1, r24	; 0x01
     c3a:	0e 5f       	subi	r16, 0xFE	; 254
     c3c:	1f 4f       	sbci	r17, 0xFF	; 255
     c3e:	88 24       	eor	r8, r8
     c40:	83 94       	inc	r8
     c42:	91 2c       	mov	r9, r1
     c44:	53 01       	movw	r10, r6
     c46:	13 c0       	rjmp	.+38     	; 0xc6e <vfprintf+0x176>
     c48:	28 01       	movw	r4, r16
     c4a:	f2 e0       	ldi	r31, 0x02	; 2
     c4c:	4f 0e       	add	r4, r31
     c4e:	51 1c       	adc	r5, r1
     c50:	f8 01       	movw	r30, r16
     c52:	a0 80       	ld	r10, Z
     c54:	b1 80       	ldd	r11, Z+1	; 0x01
     c56:	36 fe       	sbrs	r3, 6
     c58:	03 c0       	rjmp	.+6      	; 0xc60 <vfprintf+0x168>
     c5a:	69 2d       	mov	r22, r9
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <vfprintf+0x16c>
     c60:	6f ef       	ldi	r22, 0xFF	; 255
     c62:	7f ef       	ldi	r23, 0xFF	; 255
     c64:	c5 01       	movw	r24, r10
     c66:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <strnlen>
     c6a:	4c 01       	movw	r8, r24
     c6c:	82 01       	movw	r16, r4
     c6e:	f3 2d       	mov	r31, r3
     c70:	ff 77       	andi	r31, 0x7F	; 127
     c72:	3f 2e       	mov	r3, r31
     c74:	16 c0       	rjmp	.+44     	; 0xca2 <vfprintf+0x1aa>
     c76:	28 01       	movw	r4, r16
     c78:	22 e0       	ldi	r18, 0x02	; 2
     c7a:	42 0e       	add	r4, r18
     c7c:	51 1c       	adc	r5, r1
     c7e:	f8 01       	movw	r30, r16
     c80:	a0 80       	ld	r10, Z
     c82:	b1 80       	ldd	r11, Z+1	; 0x01
     c84:	36 fe       	sbrs	r3, 6
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <vfprintf+0x196>
     c88:	69 2d       	mov	r22, r9
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <vfprintf+0x19a>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	c5 01       	movw	r24, r10
     c94:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <strnlen_P>
     c98:	4c 01       	movw	r8, r24
     c9a:	f3 2d       	mov	r31, r3
     c9c:	f0 68       	ori	r31, 0x80	; 128
     c9e:	3f 2e       	mov	r3, r31
     ca0:	82 01       	movw	r16, r4
     ca2:	33 fc       	sbrc	r3, 3
     ca4:	1b c0       	rjmp	.+54     	; 0xcdc <vfprintf+0x1e4>
     ca6:	82 2d       	mov	r24, r2
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	88 16       	cp	r8, r24
     cac:	99 06       	cpc	r9, r25
     cae:	b0 f4       	brcc	.+44     	; 0xcdc <vfprintf+0x1e4>
     cb0:	b6 01       	movw	r22, r12
     cb2:	80 e2       	ldi	r24, 0x20	; 32
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
     cba:	2a 94       	dec	r2
     cbc:	f4 cf       	rjmp	.-24     	; 0xca6 <vfprintf+0x1ae>
     cbe:	f5 01       	movw	r30, r10
     cc0:	37 fc       	sbrc	r3, 7
     cc2:	85 91       	lpm	r24, Z+
     cc4:	37 fe       	sbrs	r3, 7
     cc6:	81 91       	ld	r24, Z+
     cc8:	5f 01       	movw	r10, r30
     cca:	b6 01       	movw	r22, r12
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
     cd2:	21 10       	cpse	r2, r1
     cd4:	2a 94       	dec	r2
     cd6:	21 e0       	ldi	r18, 0x01	; 1
     cd8:	82 1a       	sub	r8, r18
     cda:	91 08       	sbc	r9, r1
     cdc:	81 14       	cp	r8, r1
     cde:	91 04       	cpc	r9, r1
     ce0:	71 f7       	brne	.-36     	; 0xcbe <vfprintf+0x1c6>
     ce2:	e8 c0       	rjmp	.+464    	; 0xeb4 <vfprintf+0x3bc>
     ce4:	84 36       	cpi	r24, 0x64	; 100
     ce6:	11 f0       	breq	.+4      	; 0xcec <vfprintf+0x1f4>
     ce8:	89 36       	cpi	r24, 0x69	; 105
     cea:	41 f5       	brne	.+80     	; 0xd3c <vfprintf+0x244>
     cec:	f8 01       	movw	r30, r16
     cee:	37 fe       	sbrs	r3, 7
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <vfprintf+0x208>
     cf2:	60 81       	ld	r22, Z
     cf4:	71 81       	ldd	r23, Z+1	; 0x01
     cf6:	82 81       	ldd	r24, Z+2	; 0x02
     cf8:	93 81       	ldd	r25, Z+3	; 0x03
     cfa:	0c 5f       	subi	r16, 0xFC	; 252
     cfc:	1f 4f       	sbci	r17, 0xFF	; 255
     cfe:	08 c0       	rjmp	.+16     	; 0xd10 <vfprintf+0x218>
     d00:	60 81       	ld	r22, Z
     d02:	71 81       	ldd	r23, Z+1	; 0x01
     d04:	07 2e       	mov	r0, r23
     d06:	00 0c       	add	r0, r0
     d08:	88 0b       	sbc	r24, r24
     d0a:	99 0b       	sbc	r25, r25
     d0c:	0e 5f       	subi	r16, 0xFE	; 254
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
     d10:	f3 2d       	mov	r31, r3
     d12:	ff 76       	andi	r31, 0x6F	; 111
     d14:	3f 2e       	mov	r3, r31
     d16:	97 ff       	sbrs	r25, 7
     d18:	09 c0       	rjmp	.+18     	; 0xd2c <vfprintf+0x234>
     d1a:	90 95       	com	r25
     d1c:	80 95       	com	r24
     d1e:	70 95       	com	r23
     d20:	61 95       	neg	r22
     d22:	7f 4f       	sbci	r23, 0xFF	; 255
     d24:	8f 4f       	sbci	r24, 0xFF	; 255
     d26:	9f 4f       	sbci	r25, 0xFF	; 255
     d28:	f0 68       	ori	r31, 0x80	; 128
     d2a:	3f 2e       	mov	r3, r31
     d2c:	2a e0       	ldi	r18, 0x0A	; 10
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	a3 01       	movw	r20, r6
     d32:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__ultoa_invert>
     d36:	88 2e       	mov	r8, r24
     d38:	86 18       	sub	r8, r6
     d3a:	45 c0       	rjmp	.+138    	; 0xdc6 <vfprintf+0x2ce>
     d3c:	85 37       	cpi	r24, 0x75	; 117
     d3e:	31 f4       	brne	.+12     	; 0xd4c <vfprintf+0x254>
     d40:	23 2d       	mov	r18, r3
     d42:	2f 7e       	andi	r18, 0xEF	; 239
     d44:	b2 2e       	mov	r11, r18
     d46:	2a e0       	ldi	r18, 0x0A	; 10
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	25 c0       	rjmp	.+74     	; 0xd96 <vfprintf+0x29e>
     d4c:	93 2d       	mov	r25, r3
     d4e:	99 7f       	andi	r25, 0xF9	; 249
     d50:	b9 2e       	mov	r11, r25
     d52:	8f 36       	cpi	r24, 0x6F	; 111
     d54:	c1 f0       	breq	.+48     	; 0xd86 <vfprintf+0x28e>
     d56:	18 f4       	brcc	.+6      	; 0xd5e <vfprintf+0x266>
     d58:	88 35       	cpi	r24, 0x58	; 88
     d5a:	79 f0       	breq	.+30     	; 0xd7a <vfprintf+0x282>
     d5c:	b5 c0       	rjmp	.+362    	; 0xec8 <vfprintf+0x3d0>
     d5e:	80 37       	cpi	r24, 0x70	; 112
     d60:	19 f0       	breq	.+6      	; 0xd68 <vfprintf+0x270>
     d62:	88 37       	cpi	r24, 0x78	; 120
     d64:	21 f0       	breq	.+8      	; 0xd6e <vfprintf+0x276>
     d66:	b0 c0       	rjmp	.+352    	; 0xec8 <vfprintf+0x3d0>
     d68:	e9 2f       	mov	r30, r25
     d6a:	e0 61       	ori	r30, 0x10	; 16
     d6c:	be 2e       	mov	r11, r30
     d6e:	b4 fe       	sbrs	r11, 4
     d70:	0d c0       	rjmp	.+26     	; 0xd8c <vfprintf+0x294>
     d72:	fb 2d       	mov	r31, r11
     d74:	f4 60       	ori	r31, 0x04	; 4
     d76:	bf 2e       	mov	r11, r31
     d78:	09 c0       	rjmp	.+18     	; 0xd8c <vfprintf+0x294>
     d7a:	34 fe       	sbrs	r3, 4
     d7c:	0a c0       	rjmp	.+20     	; 0xd92 <vfprintf+0x29a>
     d7e:	29 2f       	mov	r18, r25
     d80:	26 60       	ori	r18, 0x06	; 6
     d82:	b2 2e       	mov	r11, r18
     d84:	06 c0       	rjmp	.+12     	; 0xd92 <vfprintf+0x29a>
     d86:	28 e0       	ldi	r18, 0x08	; 8
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	05 c0       	rjmp	.+10     	; 0xd96 <vfprintf+0x29e>
     d8c:	20 e1       	ldi	r18, 0x10	; 16
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <vfprintf+0x29e>
     d92:	20 e1       	ldi	r18, 0x10	; 16
     d94:	32 e0       	ldi	r19, 0x02	; 2
     d96:	f8 01       	movw	r30, r16
     d98:	b7 fe       	sbrs	r11, 7
     d9a:	07 c0       	rjmp	.+14     	; 0xdaa <vfprintf+0x2b2>
     d9c:	60 81       	ld	r22, Z
     d9e:	71 81       	ldd	r23, Z+1	; 0x01
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	0c 5f       	subi	r16, 0xFC	; 252
     da6:	1f 4f       	sbci	r17, 0xFF	; 255
     da8:	06 c0       	rjmp	.+12     	; 0xdb6 <vfprintf+0x2be>
     daa:	60 81       	ld	r22, Z
     dac:	71 81       	ldd	r23, Z+1	; 0x01
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 5f       	subi	r16, 0xFE	; 254
     db4:	1f 4f       	sbci	r17, 0xFF	; 255
     db6:	a3 01       	movw	r20, r6
     db8:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__ultoa_invert>
     dbc:	88 2e       	mov	r8, r24
     dbe:	86 18       	sub	r8, r6
     dc0:	fb 2d       	mov	r31, r11
     dc2:	ff 77       	andi	r31, 0x7F	; 127
     dc4:	3f 2e       	mov	r3, r31
     dc6:	36 fe       	sbrs	r3, 6
     dc8:	0d c0       	rjmp	.+26     	; 0xde4 <vfprintf+0x2ec>
     dca:	23 2d       	mov	r18, r3
     dcc:	2e 7f       	andi	r18, 0xFE	; 254
     dce:	a2 2e       	mov	r10, r18
     dd0:	89 14       	cp	r8, r9
     dd2:	58 f4       	brcc	.+22     	; 0xdea <vfprintf+0x2f2>
     dd4:	34 fe       	sbrs	r3, 4
     dd6:	0b c0       	rjmp	.+22     	; 0xdee <vfprintf+0x2f6>
     dd8:	32 fc       	sbrc	r3, 2
     dda:	09 c0       	rjmp	.+18     	; 0xdee <vfprintf+0x2f6>
     ddc:	83 2d       	mov	r24, r3
     dde:	8e 7e       	andi	r24, 0xEE	; 238
     de0:	a8 2e       	mov	r10, r24
     de2:	05 c0       	rjmp	.+10     	; 0xdee <vfprintf+0x2f6>
     de4:	b8 2c       	mov	r11, r8
     de6:	a3 2c       	mov	r10, r3
     de8:	03 c0       	rjmp	.+6      	; 0xdf0 <vfprintf+0x2f8>
     dea:	b8 2c       	mov	r11, r8
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <vfprintf+0x2f8>
     dee:	b9 2c       	mov	r11, r9
     df0:	a4 fe       	sbrs	r10, 4
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <vfprintf+0x31a>
     df4:	fe 01       	movw	r30, r28
     df6:	e8 0d       	add	r30, r8
     df8:	f1 1d       	adc	r31, r1
     dfa:	80 81       	ld	r24, Z
     dfc:	80 33       	cpi	r24, 0x30	; 48
     dfe:	21 f4       	brne	.+8      	; 0xe08 <vfprintf+0x310>
     e00:	9a 2d       	mov	r25, r10
     e02:	99 7e       	andi	r25, 0xE9	; 233
     e04:	a9 2e       	mov	r10, r25
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <vfprintf+0x322>
     e08:	a2 fe       	sbrs	r10, 2
     e0a:	06 c0       	rjmp	.+12     	; 0xe18 <vfprintf+0x320>
     e0c:	b3 94       	inc	r11
     e0e:	b3 94       	inc	r11
     e10:	04 c0       	rjmp	.+8      	; 0xe1a <vfprintf+0x322>
     e12:	8a 2d       	mov	r24, r10
     e14:	86 78       	andi	r24, 0x86	; 134
     e16:	09 f0       	breq	.+2      	; 0xe1a <vfprintf+0x322>
     e18:	b3 94       	inc	r11
     e1a:	a3 fc       	sbrc	r10, 3
     e1c:	11 c0       	rjmp	.+34     	; 0xe40 <vfprintf+0x348>
     e1e:	a0 fe       	sbrs	r10, 0
     e20:	06 c0       	rjmp	.+12     	; 0xe2e <vfprintf+0x336>
     e22:	b2 14       	cp	r11, r2
     e24:	88 f4       	brcc	.+34     	; 0xe48 <vfprintf+0x350>
     e26:	28 0c       	add	r2, r8
     e28:	92 2c       	mov	r9, r2
     e2a:	9b 18       	sub	r9, r11
     e2c:	0e c0       	rjmp	.+28     	; 0xe4a <vfprintf+0x352>
     e2e:	b2 14       	cp	r11, r2
     e30:	60 f4       	brcc	.+24     	; 0xe4a <vfprintf+0x352>
     e32:	b6 01       	movw	r22, r12
     e34:	80 e2       	ldi	r24, 0x20	; 32
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
     e3c:	b3 94       	inc	r11
     e3e:	f7 cf       	rjmp	.-18     	; 0xe2e <vfprintf+0x336>
     e40:	b2 14       	cp	r11, r2
     e42:	18 f4       	brcc	.+6      	; 0xe4a <vfprintf+0x352>
     e44:	2b 18       	sub	r2, r11
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <vfprintf+0x354>
     e48:	98 2c       	mov	r9, r8
     e4a:	21 2c       	mov	r2, r1
     e4c:	a4 fe       	sbrs	r10, 4
     e4e:	10 c0       	rjmp	.+32     	; 0xe70 <vfprintf+0x378>
     e50:	b6 01       	movw	r22, r12
     e52:	80 e3       	ldi	r24, 0x30	; 48
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
     e5a:	a2 fe       	sbrs	r10, 2
     e5c:	17 c0       	rjmp	.+46     	; 0xe8c <vfprintf+0x394>
     e5e:	a1 fc       	sbrc	r10, 1
     e60:	03 c0       	rjmp	.+6      	; 0xe68 <vfprintf+0x370>
     e62:	88 e7       	ldi	r24, 0x78	; 120
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <vfprintf+0x374>
     e68:	88 e5       	ldi	r24, 0x58	; 88
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	b6 01       	movw	r22, r12
     e6e:	0c c0       	rjmp	.+24     	; 0xe88 <vfprintf+0x390>
     e70:	8a 2d       	mov	r24, r10
     e72:	86 78       	andi	r24, 0x86	; 134
     e74:	59 f0       	breq	.+22     	; 0xe8c <vfprintf+0x394>
     e76:	a1 fe       	sbrs	r10, 1
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <vfprintf+0x386>
     e7a:	8b e2       	ldi	r24, 0x2B	; 43
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <vfprintf+0x388>
     e7e:	80 e2       	ldi	r24, 0x20	; 32
     e80:	a7 fc       	sbrc	r10, 7
     e82:	8d e2       	ldi	r24, 0x2D	; 45
     e84:	b6 01       	movw	r22, r12
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
     e8c:	89 14       	cp	r8, r9
     e8e:	38 f4       	brcc	.+14     	; 0xe9e <vfprintf+0x3a6>
     e90:	b6 01       	movw	r22, r12
     e92:	80 e3       	ldi	r24, 0x30	; 48
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
     e9a:	9a 94       	dec	r9
     e9c:	f7 cf       	rjmp	.-18     	; 0xe8c <vfprintf+0x394>
     e9e:	8a 94       	dec	r8
     ea0:	f3 01       	movw	r30, r6
     ea2:	e8 0d       	add	r30, r8
     ea4:	f1 1d       	adc	r31, r1
     ea6:	80 81       	ld	r24, Z
     ea8:	b6 01       	movw	r22, r12
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
     eb0:	81 10       	cpse	r8, r1
     eb2:	f5 cf       	rjmp	.-22     	; 0xe9e <vfprintf+0x3a6>
     eb4:	22 20       	and	r2, r2
     eb6:	09 f4       	brne	.+2      	; 0xeba <vfprintf+0x3c2>
     eb8:	42 ce       	rjmp	.-892    	; 0xb3e <vfprintf+0x46>
     eba:	b6 01       	movw	r22, r12
     ebc:	80 e2       	ldi	r24, 0x20	; 32
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
     ec4:	2a 94       	dec	r2
     ec6:	f6 cf       	rjmp	.-20     	; 0xeb4 <vfprintf+0x3bc>
     ec8:	f6 01       	movw	r30, r12
     eca:	86 81       	ldd	r24, Z+6	; 0x06
     ecc:	97 81       	ldd	r25, Z+7	; 0x07
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <vfprintf+0x3dc>
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	9f ef       	ldi	r25, 0xFF	; 255
     ed4:	2b 96       	adiw	r28, 0x0b	; 11
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	bf 90       	pop	r11
     eec:	af 90       	pop	r10
     eee:	9f 90       	pop	r9
     ef0:	8f 90       	pop	r8
     ef2:	7f 90       	pop	r7
     ef4:	6f 90       	pop	r6
     ef6:	5f 90       	pop	r5
     ef8:	4f 90       	pop	r4
     efa:	3f 90       	pop	r3
     efc:	2f 90       	pop	r2
     efe:	08 95       	ret

00000f00 <putval>:
     f00:	20 fd       	sbrc	r18, 0
     f02:	09 c0       	rjmp	.+18     	; 0xf16 <putval+0x16>
     f04:	fc 01       	movw	r30, r24
     f06:	23 fd       	sbrc	r18, 3
     f08:	05 c0       	rjmp	.+10     	; 0xf14 <putval+0x14>
     f0a:	22 ff       	sbrs	r18, 2
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <putval+0x12>
     f0e:	73 83       	std	Z+3, r23	; 0x03
     f10:	62 83       	std	Z+2, r22	; 0x02
     f12:	51 83       	std	Z+1, r21	; 0x01
     f14:	40 83       	st	Z, r20
     f16:	08 95       	ret

00000f18 <mulacc>:
     f18:	44 fd       	sbrc	r20, 4
     f1a:	17 c0       	rjmp	.+46     	; 0xf4a <mulacc+0x32>
     f1c:	46 fd       	sbrc	r20, 6
     f1e:	17 c0       	rjmp	.+46     	; 0xf4e <mulacc+0x36>
     f20:	ab 01       	movw	r20, r22
     f22:	bc 01       	movw	r22, r24
     f24:	da 01       	movw	r26, r20
     f26:	fb 01       	movw	r30, r22
     f28:	aa 0f       	add	r26, r26
     f2a:	bb 1f       	adc	r27, r27
     f2c:	ee 1f       	adc	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	10 94       	com	r1
     f32:	d1 f7       	brne	.-12     	; 0xf28 <mulacc+0x10>
     f34:	4a 0f       	add	r20, r26
     f36:	5b 1f       	adc	r21, r27
     f38:	6e 1f       	adc	r22, r30
     f3a:	7f 1f       	adc	r23, r31
     f3c:	cb 01       	movw	r24, r22
     f3e:	ba 01       	movw	r22, r20
     f40:	66 0f       	add	r22, r22
     f42:	77 1f       	adc	r23, r23
     f44:	88 1f       	adc	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	09 c0       	rjmp	.+18     	; 0xf5c <mulacc+0x44>
     f4a:	33 e0       	ldi	r19, 0x03	; 3
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <mulacc+0x38>
     f4e:	34 e0       	ldi	r19, 0x04	; 4
     f50:	66 0f       	add	r22, r22
     f52:	77 1f       	adc	r23, r23
     f54:	88 1f       	adc	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	31 50       	subi	r19, 0x01	; 1
     f5a:	d1 f7       	brne	.-12     	; 0xf50 <mulacc+0x38>
     f5c:	62 0f       	add	r22, r18
     f5e:	71 1d       	adc	r23, r1
     f60:	81 1d       	adc	r24, r1
     f62:	91 1d       	adc	r25, r1
     f64:	08 95       	ret

00000f66 <skip_spaces>:
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	8c 01       	movw	r16, r24
     f70:	c8 01       	movw	r24, r16
     f72:	0e 94 88 0a 	call	0x1510	; 0x1510 <fgetc>
     f76:	ec 01       	movw	r28, r24
     f78:	97 fd       	sbrc	r25, 7
     f7a:	08 c0       	rjmp	.+16     	; 0xf8c <skip_spaces+0x26>
     f7c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <isspace>
     f80:	89 2b       	or	r24, r25
     f82:	b1 f7       	brne	.-20     	; 0xf70 <skip_spaces+0xa>
     f84:	b8 01       	movw	r22, r16
     f86:	ce 01       	movw	r24, r28
     f88:	0e 94 02 0b 	call	0x1604	; 0x1604 <ungetc>
     f8c:	ce 01       	movw	r24, r28
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	08 95       	ret

00000f98 <conv_int>:
     f98:	8f 92       	push	r8
     f9a:	9f 92       	push	r9
     f9c:	af 92       	push	r10
     f9e:	bf 92       	push	r11
     fa0:	ef 92       	push	r14
     fa2:	ff 92       	push	r15
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	8c 01       	movw	r16, r24
     fae:	d6 2f       	mov	r29, r22
     fb0:	7a 01       	movw	r14, r20
     fb2:	b2 2e       	mov	r11, r18
     fb4:	0e 94 88 0a 	call	0x1510	; 0x1510 <fgetc>
     fb8:	9c 01       	movw	r18, r24
     fba:	33 27       	eor	r19, r19
     fbc:	2b 32       	cpi	r18, 0x2B	; 43
     fbe:	31 05       	cpc	r19, r1
     fc0:	31 f0       	breq	.+12     	; 0xfce <conv_int+0x36>
     fc2:	2d 32       	cpi	r18, 0x2D	; 45
     fc4:	31 05       	cpc	r19, r1
     fc6:	61 f4       	brne	.+24     	; 0xfe0 <conv_int+0x48>
     fc8:	8b 2d       	mov	r24, r11
     fca:	80 68       	ori	r24, 0x80	; 128
     fcc:	b8 2e       	mov	r11, r24
     fce:	d1 50       	subi	r29, 0x01	; 1
     fd0:	11 f4       	brne	.+4      	; 0xfd6 <conv_int+0x3e>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	68 c0       	rjmp	.+208    	; 0x10a6 <conv_int+0x10e>
     fd6:	c8 01       	movw	r24, r16
     fd8:	0e 94 88 0a 	call	0x1510	; 0x1510 <fgetc>
     fdc:	97 fd       	sbrc	r25, 7
     fde:	f9 cf       	rjmp	.-14     	; 0xfd2 <conv_int+0x3a>
     fe0:	cb 2d       	mov	r28, r11
     fe2:	cd 7f       	andi	r28, 0xFD	; 253
     fe4:	2b 2d       	mov	r18, r11
     fe6:	20 73       	andi	r18, 0x30	; 48
     fe8:	09 f5       	brne	.+66     	; 0x102c <conv_int+0x94>
     fea:	80 33       	cpi	r24, 0x30	; 48
     fec:	f9 f4       	brne	.+62     	; 0x102c <conv_int+0x94>
     fee:	aa 24       	eor	r10, r10
     ff0:	aa 94       	dec	r10
     ff2:	ad 0e       	add	r10, r29
     ff4:	09 f4       	brne	.+2      	; 0xff8 <conv_int+0x60>
     ff6:	43 c0       	rjmp	.+134    	; 0x107e <conv_int+0xe6>
     ff8:	c8 01       	movw	r24, r16
     ffa:	0e 94 88 0a 	call	0x1510	; 0x1510 <fgetc>
     ffe:	97 fd       	sbrc	r25, 7
    1000:	3e c0       	rjmp	.+124    	; 0x107e <conv_int+0xe6>
    1002:	9c 01       	movw	r18, r24
    1004:	2f 7d       	andi	r18, 0xDF	; 223
    1006:	33 27       	eor	r19, r19
    1008:	28 35       	cpi	r18, 0x58	; 88
    100a:	31 05       	cpc	r19, r1
    100c:	49 f4       	brne	.+18     	; 0x1020 <conv_int+0x88>
    100e:	c2 64       	ori	r28, 0x42	; 66
    1010:	d2 50       	subi	r29, 0x02	; 2
    1012:	a9 f1       	breq	.+106    	; 0x107e <conv_int+0xe6>
    1014:	c8 01       	movw	r24, r16
    1016:	0e 94 88 0a 	call	0x1510	; 0x1510 <fgetc>
    101a:	97 ff       	sbrs	r25, 7
    101c:	07 c0       	rjmp	.+14     	; 0x102c <conv_int+0x94>
    101e:	2f c0       	rjmp	.+94     	; 0x107e <conv_int+0xe6>
    1020:	b6 fe       	sbrs	r11, 6
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <conv_int+0x90>
    1024:	c2 60       	ori	r28, 0x02	; 2
    1026:	01 c0       	rjmp	.+2      	; 0x102a <conv_int+0x92>
    1028:	c2 61       	ori	r28, 0x12	; 18
    102a:	da 2d       	mov	r29, r10
    102c:	81 2c       	mov	r8, r1
    102e:	91 2c       	mov	r9, r1
    1030:	54 01       	movw	r10, r8
    1032:	20 ed       	ldi	r18, 0xD0	; 208
    1034:	28 0f       	add	r18, r24
    1036:	28 30       	cpi	r18, 0x08	; 8
    1038:	80 f0       	brcs	.+32     	; 0x105a <conv_int+0xc2>
    103a:	c4 ff       	sbrs	r28, 4
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <conv_int+0xae>
    103e:	b8 01       	movw	r22, r16
    1040:	0e 94 02 0b 	call	0x1604	; 0x1604 <ungetc>
    1044:	19 c0       	rjmp	.+50     	; 0x1078 <conv_int+0xe0>
    1046:	2a 30       	cpi	r18, 0x0A	; 10
    1048:	40 f0       	brcs	.+16     	; 0x105a <conv_int+0xc2>
    104a:	c6 ff       	sbrs	r28, 6
    104c:	f8 cf       	rjmp	.-16     	; 0x103e <conv_int+0xa6>
    104e:	2f 7d       	andi	r18, 0xDF	; 223
    1050:	3f ee       	ldi	r19, 0xEF	; 239
    1052:	32 0f       	add	r19, r18
    1054:	36 30       	cpi	r19, 0x06	; 6
    1056:	98 f7       	brcc	.-26     	; 0x103e <conv_int+0xa6>
    1058:	27 50       	subi	r18, 0x07	; 7
    105a:	4c 2f       	mov	r20, r28
    105c:	c5 01       	movw	r24, r10
    105e:	b4 01       	movw	r22, r8
    1060:	0e 94 8c 07 	call	0xf18	; 0xf18 <mulacc>
    1064:	4b 01       	movw	r8, r22
    1066:	5c 01       	movw	r10, r24
    1068:	c2 60       	ori	r28, 0x02	; 2
    106a:	d1 50       	subi	r29, 0x01	; 1
    106c:	59 f0       	breq	.+22     	; 0x1084 <conv_int+0xec>
    106e:	c8 01       	movw	r24, r16
    1070:	0e 94 88 0a 	call	0x1510	; 0x1510 <fgetc>
    1074:	97 ff       	sbrs	r25, 7
    1076:	dd cf       	rjmp	.-70     	; 0x1032 <conv_int+0x9a>
    1078:	c1 fd       	sbrc	r28, 1
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <conv_int+0xec>
    107c:	aa cf       	rjmp	.-172    	; 0xfd2 <conv_int+0x3a>
    107e:	81 2c       	mov	r8, r1
    1080:	91 2c       	mov	r9, r1
    1082:	54 01       	movw	r10, r8
    1084:	c7 ff       	sbrs	r28, 7
    1086:	08 c0       	rjmp	.+16     	; 0x1098 <conv_int+0x100>
    1088:	b0 94       	com	r11
    108a:	a0 94       	com	r10
    108c:	90 94       	com	r9
    108e:	80 94       	com	r8
    1090:	81 1c       	adc	r8, r1
    1092:	91 1c       	adc	r9, r1
    1094:	a1 1c       	adc	r10, r1
    1096:	b1 1c       	adc	r11, r1
    1098:	2c 2f       	mov	r18, r28
    109a:	b5 01       	movw	r22, r10
    109c:	a4 01       	movw	r20, r8
    109e:	c7 01       	movw	r24, r14
    10a0:	0e 94 80 07 	call	0xf00	; 0xf00 <putval>
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	ff 90       	pop	r15
    10b0:	ef 90       	pop	r14
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	9f 90       	pop	r9
    10b8:	8f 90       	pop	r8
    10ba:	08 95       	ret

000010bc <conv_brk>:
    10bc:	5f 92       	push	r5
    10be:	6f 92       	push	r6
    10c0:	7f 92       	push	r7
    10c2:	8f 92       	push	r8
    10c4:	9f 92       	push	r9
    10c6:	af 92       	push	r10
    10c8:	bf 92       	push	r11
    10ca:	cf 92       	push	r12
    10cc:	df 92       	push	r13
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	a0 97       	sbiw	r28, 0x20	; 32
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	5c 01       	movw	r10, r24
    10e6:	96 2e       	mov	r9, r22
    10e8:	7a 01       	movw	r14, r20
    10ea:	f9 01       	movw	r30, r18
    10ec:	8e 01       	movw	r16, r28
    10ee:	0f 5f       	subi	r16, 0xFF	; 255
    10f0:	1f 4f       	sbci	r17, 0xFF	; 255
    10f2:	68 01       	movw	r12, r16
    10f4:	80 e2       	ldi	r24, 0x20	; 32
    10f6:	d8 01       	movw	r26, r16
    10f8:	1d 92       	st	X+, r1
    10fa:	8a 95       	dec	r24
    10fc:	e9 f7       	brne	.-6      	; 0x10f8 <conv_brk+0x3c>
    10fe:	d5 01       	movw	r26, r10
    1100:	13 96       	adiw	r26, 0x03	; 3
    1102:	8c 90       	ld	r8, X
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	61 2c       	mov	r6, r1
    110a:	71 2c       	mov	r7, r1
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	61 e0       	ldi	r22, 0x01	; 1
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	83 fc       	sbrc	r8, 3
    1114:	25 91       	lpm	r18, Z+
    1116:	83 fe       	sbrs	r8, 3
    1118:	21 91       	ld	r18, Z+
    111a:	8f 01       	movw	r16, r30
    111c:	52 2e       	mov	r5, r18
    111e:	21 11       	cpse	r18, r1
    1120:	03 c0       	rjmp	.+6      	; 0x1128 <conv_brk+0x6c>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	92 c0       	rjmp	.+292    	; 0x124c <conv_brk+0x190>
    1128:	2e 35       	cpi	r18, 0x5E	; 94
    112a:	11 f4       	brne	.+4      	; 0x1130 <conv_brk+0x74>
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	51 f1       	breq	.+84     	; 0x1184 <conv_brk+0xc8>
    1130:	43 2f       	mov	r20, r19
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	48 17       	cp	r20, r24
    1136:	59 07       	cpc	r21, r25
    1138:	3c f4       	brge	.+14     	; 0x1148 <conv_brk+0x8c>
    113a:	2d 35       	cpi	r18, 0x5D	; 93
    113c:	59 f1       	breq	.+86     	; 0x1194 <conv_brk+0xd8>
    113e:	2d 32       	cpi	r18, 0x2D	; 45
    1140:	19 f4       	brne	.+6      	; 0x1148 <conv_brk+0x8c>
    1142:	77 20       	and	r7, r7
    1144:	09 f1       	breq	.+66     	; 0x1188 <conv_brk+0xcc>
    1146:	03 c0       	rjmp	.+6      	; 0x114e <conv_brk+0x92>
    1148:	77 20       	and	r7, r7
    114a:	09 f4       	brne	.+2      	; 0x114e <conv_brk+0x92>
    114c:	6a c0       	rjmp	.+212    	; 0x1222 <conv_brk+0x166>
    114e:	45 2d       	mov	r20, r5
    1150:	46 95       	lsr	r20
    1152:	46 95       	lsr	r20
    1154:	46 95       	lsr	r20
    1156:	d6 01       	movw	r26, r12
    1158:	a4 0f       	add	r26, r20
    115a:	b1 1d       	adc	r27, r1
    115c:	45 2d       	mov	r20, r5
    115e:	47 70       	andi	r20, 0x07	; 7
    1160:	8b 01       	movw	r16, r22
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <conv_brk+0xac>
    1164:	00 0f       	add	r16, r16
    1166:	11 1f       	adc	r17, r17
    1168:	4a 95       	dec	r20
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <conv_brk+0xa8>
    116c:	a8 01       	movw	r20, r16
    116e:	5c 91       	ld	r21, X
    1170:	45 2b       	or	r20, r21
    1172:	4c 93       	st	X, r20
    1174:	65 14       	cp	r6, r5
    1176:	59 f0       	breq	.+22     	; 0x118e <conv_brk+0xd2>
    1178:	56 14       	cp	r5, r6
    117a:	10 f4       	brcc	.+4      	; 0x1180 <conv_brk+0xc4>
    117c:	53 94       	inc	r5
    117e:	e7 cf       	rjmp	.-50     	; 0x114e <conv_brk+0x92>
    1180:	5a 94       	dec	r5
    1182:	e5 cf       	rjmp	.-54     	; 0x114e <conv_brk+0x92>
    1184:	31 e0       	ldi	r19, 0x01	; 1
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <conv_brk+0xd4>
    1188:	77 24       	eor	r7, r7
    118a:	73 94       	inc	r7
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <conv_brk+0xd4>
    118e:	71 2c       	mov	r7, r1
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	bf cf       	rjmp	.-130    	; 0x1112 <conv_brk+0x56>
    1194:	77 20       	and	r7, r7
    1196:	19 f0       	breq	.+6      	; 0x119e <conv_brk+0xe2>
    1198:	8e 81       	ldd	r24, Y+6	; 0x06
    119a:	80 62       	ori	r24, 0x20	; 32
    119c:	8e 83       	std	Y+6, r24	; 0x06
    119e:	31 11       	cpse	r19, r1
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <conv_brk+0xec>
    11a2:	88 24       	eor	r8, r8
    11a4:	83 94       	inc	r8
    11a6:	17 c0       	rjmp	.+46     	; 0x11d6 <conv_brk+0x11a>
    11a8:	f6 01       	movw	r30, r12
    11aa:	9e 01       	movw	r18, r28
    11ac:	2f 5d       	subi	r18, 0xDF	; 223
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	80 81       	ld	r24, Z
    11b2:	80 95       	com	r24
    11b4:	81 93       	st	Z+, r24
    11b6:	2e 17       	cp	r18, r30
    11b8:	3f 07       	cpc	r19, r31
    11ba:	d1 f7       	brne	.-12     	; 0x11b0 <conv_brk+0xf4>
    11bc:	f2 cf       	rjmp	.-28     	; 0x11a2 <conv_brk+0xe6>
    11be:	e1 14       	cp	r14, r1
    11c0:	f1 04       	cpc	r15, r1
    11c2:	29 f0       	breq	.+10     	; 0x11ce <conv_brk+0x112>
    11c4:	d7 01       	movw	r26, r14
    11c6:	8c 93       	st	X, r24
    11c8:	f7 01       	movw	r30, r14
    11ca:	31 96       	adiw	r30, 0x01	; 1
    11cc:	7f 01       	movw	r14, r30
    11ce:	9a 94       	dec	r9
    11d0:	81 2c       	mov	r8, r1
    11d2:	99 20       	and	r9, r9
    11d4:	f9 f0       	breq	.+62     	; 0x1214 <conv_brk+0x158>
    11d6:	c5 01       	movw	r24, r10
    11d8:	0e 94 88 0a 	call	0x1510	; 0x1510 <fgetc>
    11dc:	97 fd       	sbrc	r25, 7
    11de:	18 c0       	rjmp	.+48     	; 0x1210 <conv_brk+0x154>
    11e0:	fc 01       	movw	r30, r24
    11e2:	ff 27       	eor	r31, r31
    11e4:	23 e0       	ldi	r18, 0x03	; 3
    11e6:	f5 95       	asr	r31
    11e8:	e7 95       	ror	r30
    11ea:	2a 95       	dec	r18
    11ec:	e1 f7       	brne	.-8      	; 0x11e6 <conv_brk+0x12a>
    11ee:	ec 0d       	add	r30, r12
    11f0:	fd 1d       	adc	r31, r13
    11f2:	20 81       	ld	r18, Z
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	ac 01       	movw	r20, r24
    11f8:	47 70       	andi	r20, 0x07	; 7
    11fa:	55 27       	eor	r21, r21
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <conv_brk+0x146>
    11fe:	35 95       	asr	r19
    1200:	27 95       	ror	r18
    1202:	4a 95       	dec	r20
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <conv_brk+0x142>
    1206:	20 fd       	sbrc	r18, 0
    1208:	da cf       	rjmp	.-76     	; 0x11be <conv_brk+0x102>
    120a:	b5 01       	movw	r22, r10
    120c:	0e 94 02 0b 	call	0x1604	; 0x1604 <ungetc>
    1210:	81 10       	cpse	r8, r1
    1212:	87 cf       	rjmp	.-242    	; 0x1122 <conv_brk+0x66>
    1214:	e1 14       	cp	r14, r1
    1216:	f1 04       	cpc	r15, r1
    1218:	11 f0       	breq	.+4      	; 0x121e <conv_brk+0x162>
    121a:	d7 01       	movw	r26, r14
    121c:	1c 92       	st	X, r1
    121e:	c8 01       	movw	r24, r16
    1220:	15 c0       	rjmp	.+42     	; 0x124c <conv_brk+0x190>
    1222:	42 2f       	mov	r20, r18
    1224:	46 95       	lsr	r20
    1226:	46 95       	lsr	r20
    1228:	46 95       	lsr	r20
    122a:	d6 01       	movw	r26, r12
    122c:	a4 0f       	add	r26, r20
    122e:	b1 1d       	adc	r27, r1
    1230:	42 2f       	mov	r20, r18
    1232:	47 70       	andi	r20, 0x07	; 7
    1234:	8b 01       	movw	r16, r22
    1236:	02 c0       	rjmp	.+4      	; 0x123c <conv_brk+0x180>
    1238:	00 0f       	add	r16, r16
    123a:	11 1f       	adc	r17, r17
    123c:	4a 95       	dec	r20
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <conv_brk+0x17c>
    1240:	a8 01       	movw	r20, r16
    1242:	5c 91       	ld	r21, X
    1244:	45 2b       	or	r20, r21
    1246:	4c 93       	st	X, r20
    1248:	62 2e       	mov	r6, r18
    124a:	a2 cf       	rjmp	.-188    	; 0x1190 <conv_brk+0xd4>
    124c:	a0 96       	adiw	r28, 0x20	; 32
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	df 90       	pop	r13
    1260:	cf 90       	pop	r12
    1262:	bf 90       	pop	r11
    1264:	af 90       	pop	r10
    1266:	9f 90       	pop	r9
    1268:	8f 90       	pop	r8
    126a:	7f 90       	pop	r7
    126c:	6f 90       	pop	r6
    126e:	5f 90       	pop	r5
    1270:	08 95       	ret

00001272 <vfscanf>:
    1272:	5f 92       	push	r5
    1274:	6f 92       	push	r6
    1276:	7f 92       	push	r7
    1278:	8f 92       	push	r8
    127a:	9f 92       	push	r9
    127c:	af 92       	push	r10
    127e:	bf 92       	push	r11
    1280:	cf 92       	push	r12
    1282:	df 92       	push	r13
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	6c 01       	movw	r12, r24
    1292:	eb 01       	movw	r28, r22
    1294:	5a 01       	movw	r10, r20
    1296:	fc 01       	movw	r30, r24
    1298:	16 82       	std	Z+6, r1	; 0x06
    129a:	17 82       	std	Z+7, r1	; 0x07
    129c:	51 2c       	mov	r5, r1
    129e:	f6 01       	movw	r30, r12
    12a0:	e3 80       	ldd	r14, Z+3	; 0x03
    12a2:	fe 01       	movw	r30, r28
    12a4:	e3 fc       	sbrc	r14, 3
    12a6:	85 91       	lpm	r24, Z+
    12a8:	e3 fe       	sbrs	r14, 3
    12aa:	81 91       	ld	r24, Z+
    12ac:	18 2f       	mov	r17, r24
    12ae:	ef 01       	movw	r28, r30
    12b0:	88 23       	and	r24, r24
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <vfscanf+0x44>
    12b4:	ee c0       	rjmp	.+476    	; 0x1492 <vfscanf+0x220>
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <isspace>
    12bc:	89 2b       	or	r24, r25
    12be:	21 f0       	breq	.+8      	; 0x12c8 <vfscanf+0x56>
    12c0:	c6 01       	movw	r24, r12
    12c2:	0e 94 b3 07 	call	0xf66	; 0xf66 <skip_spaces>
    12c6:	eb cf       	rjmp	.-42     	; 0x129e <vfscanf+0x2c>
    12c8:	15 32       	cpi	r17, 0x25	; 37
    12ca:	41 f4       	brne	.+16     	; 0x12dc <vfscanf+0x6a>
    12cc:	fe 01       	movw	r30, r28
    12ce:	e3 fc       	sbrc	r14, 3
    12d0:	15 91       	lpm	r17, Z+
    12d2:	e3 fe       	sbrs	r14, 3
    12d4:	11 91       	ld	r17, Z+
    12d6:	ef 01       	movw	r28, r30
    12d8:	15 32       	cpi	r17, 0x25	; 37
    12da:	81 f4       	brne	.+32     	; 0x12fc <vfscanf+0x8a>
    12dc:	c6 01       	movw	r24, r12
    12de:	0e 94 88 0a 	call	0x1510	; 0x1510 <fgetc>
    12e2:	97 fd       	sbrc	r25, 7
    12e4:	d4 c0       	rjmp	.+424    	; 0x148e <vfscanf+0x21c>
    12e6:	41 2f       	mov	r20, r17
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	9c 01       	movw	r18, r24
    12ec:	33 27       	eor	r19, r19
    12ee:	24 17       	cp	r18, r20
    12f0:	35 07       	cpc	r19, r21
    12f2:	a9 f2       	breq	.-86     	; 0x129e <vfscanf+0x2c>
    12f4:	b6 01       	movw	r22, r12
    12f6:	0e 94 02 0b 	call	0x1604	; 0x1604 <ungetc>
    12fa:	cb c0       	rjmp	.+406    	; 0x1492 <vfscanf+0x220>
    12fc:	1a 32       	cpi	r17, 0x2A	; 42
    12fe:	39 f4       	brne	.+14     	; 0x130e <vfscanf+0x9c>
    1300:	e3 fc       	sbrc	r14, 3
    1302:	15 91       	lpm	r17, Z+
    1304:	e3 fe       	sbrs	r14, 3
    1306:	11 91       	ld	r17, Z+
    1308:	ef 01       	movw	r28, r30
    130a:	01 e0       	ldi	r16, 0x01	; 1
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <vfscanf+0x9e>
    130e:	00 e0       	ldi	r16, 0x00	; 0
    1310:	f1 2c       	mov	r15, r1
    1312:	20 ed       	ldi	r18, 0xD0	; 208
    1314:	21 0f       	add	r18, r17
    1316:	2a 30       	cpi	r18, 0x0A	; 10
    1318:	80 f4       	brcc	.+32     	; 0x133a <vfscanf+0xc8>
    131a:	02 60       	ori	r16, 0x02	; 2
    131c:	6f 2d       	mov	r22, r15
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	40 e2       	ldi	r20, 0x20	; 32
    1326:	0e 94 8c 07 	call	0xf18	; 0xf18 <mulacc>
    132a:	f6 2e       	mov	r15, r22
    132c:	fe 01       	movw	r30, r28
    132e:	e3 fc       	sbrc	r14, 3
    1330:	15 91       	lpm	r17, Z+
    1332:	e3 fe       	sbrs	r14, 3
    1334:	11 91       	ld	r17, Z+
    1336:	ef 01       	movw	r28, r30
    1338:	ec cf       	rjmp	.-40     	; 0x1312 <vfscanf+0xa0>
    133a:	01 ff       	sbrs	r16, 1
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <vfscanf+0xd2>
    133e:	f1 10       	cpse	r15, r1
    1340:	03 c0       	rjmp	.+6      	; 0x1348 <vfscanf+0xd6>
    1342:	a7 c0       	rjmp	.+334    	; 0x1492 <vfscanf+0x220>
    1344:	ff 24       	eor	r15, r15
    1346:	fa 94       	dec	r15
    1348:	18 36       	cpi	r17, 0x68	; 104
    134a:	19 f0       	breq	.+6      	; 0x1352 <vfscanf+0xe0>
    134c:	1c 36       	cpi	r17, 0x6C	; 108
    134e:	51 f0       	breq	.+20     	; 0x1364 <vfscanf+0xf2>
    1350:	10 c0       	rjmp	.+32     	; 0x1372 <vfscanf+0x100>
    1352:	fe 01       	movw	r30, r28
    1354:	e3 fc       	sbrc	r14, 3
    1356:	15 91       	lpm	r17, Z+
    1358:	e3 fe       	sbrs	r14, 3
    135a:	11 91       	ld	r17, Z+
    135c:	ef 01       	movw	r28, r30
    135e:	18 36       	cpi	r17, 0x68	; 104
    1360:	41 f4       	brne	.+16     	; 0x1372 <vfscanf+0x100>
    1362:	08 60       	ori	r16, 0x08	; 8
    1364:	04 60       	ori	r16, 0x04	; 4
    1366:	fe 01       	movw	r30, r28
    1368:	e3 fc       	sbrc	r14, 3
    136a:	15 91       	lpm	r17, Z+
    136c:	e3 fe       	sbrs	r14, 3
    136e:	11 91       	ld	r17, Z+
    1370:	ef 01       	movw	r28, r30
    1372:	11 23       	and	r17, r17
    1374:	09 f4       	brne	.+2      	; 0x1378 <vfscanf+0x106>
    1376:	8d c0       	rjmp	.+282    	; 0x1492 <vfscanf+0x220>
    1378:	61 2f       	mov	r22, r17
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	84 ef       	ldi	r24, 0xF4	; 244
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 67 0a 	call	0x14ce	; 0x14ce <strchr_P>
    1384:	89 2b       	or	r24, r25
    1386:	09 f4       	brne	.+2      	; 0x138a <vfscanf+0x118>
    1388:	84 c0       	rjmp	.+264    	; 0x1492 <vfscanf+0x220>
    138a:	00 fd       	sbrc	r16, 0
    138c:	07 c0       	rjmp	.+14     	; 0x139c <vfscanf+0x12a>
    138e:	f5 01       	movw	r30, r10
    1390:	80 80       	ld	r8, Z
    1392:	91 80       	ldd	r9, Z+1	; 0x01
    1394:	c5 01       	movw	r24, r10
    1396:	02 96       	adiw	r24, 0x02	; 2
    1398:	5c 01       	movw	r10, r24
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <vfscanf+0x12e>
    139c:	81 2c       	mov	r8, r1
    139e:	91 2c       	mov	r9, r1
    13a0:	1e 36       	cpi	r17, 0x6E	; 110
    13a2:	51 f4       	brne	.+20     	; 0x13b8 <vfscanf+0x146>
    13a4:	f6 01       	movw	r30, r12
    13a6:	46 81       	ldd	r20, Z+6	; 0x06
    13a8:	57 81       	ldd	r21, Z+7	; 0x07
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	20 2f       	mov	r18, r16
    13b0:	c4 01       	movw	r24, r8
    13b2:	0e 94 80 07 	call	0xf00	; 0xf00 <putval>
    13b6:	73 cf       	rjmp	.-282    	; 0x129e <vfscanf+0x2c>
    13b8:	13 36       	cpi	r17, 0x63	; 99
    13ba:	a9 f4       	brne	.+42     	; 0x13e6 <vfscanf+0x174>
    13bc:	01 fd       	sbrc	r16, 1
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <vfscanf+0x152>
    13c0:	ff 24       	eor	r15, r15
    13c2:	f3 94       	inc	r15
    13c4:	c6 01       	movw	r24, r12
    13c6:	0e 94 88 0a 	call	0x1510	; 0x1510 <fgetc>
    13ca:	97 fd       	sbrc	r25, 7
    13cc:	60 c0       	rjmp	.+192    	; 0x148e <vfscanf+0x21c>
    13ce:	81 14       	cp	r8, r1
    13d0:	91 04       	cpc	r9, r1
    13d2:	29 f0       	breq	.+10     	; 0x13de <vfscanf+0x16c>
    13d4:	f4 01       	movw	r30, r8
    13d6:	80 83       	st	Z, r24
    13d8:	c4 01       	movw	r24, r8
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	4c 01       	movw	r8, r24
    13de:	fa 94       	dec	r15
    13e0:	f1 10       	cpse	r15, r1
    13e2:	f0 cf       	rjmp	.-32     	; 0x13c4 <vfscanf+0x152>
    13e4:	50 c0       	rjmp	.+160    	; 0x1486 <vfscanf+0x214>
    13e6:	1b 35       	cpi	r17, 0x5B	; 91
    13e8:	59 f4       	brne	.+22     	; 0x1400 <vfscanf+0x18e>
    13ea:	9e 01       	movw	r18, r28
    13ec:	a4 01       	movw	r20, r8
    13ee:	6f 2d       	mov	r22, r15
    13f0:	c6 01       	movw	r24, r12
    13f2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <conv_brk>
    13f6:	ec 01       	movw	r28, r24
    13f8:	89 2b       	or	r24, r25
    13fa:	09 f0       	breq	.+2      	; 0x13fe <vfscanf+0x18c>
    13fc:	44 c0       	rjmp	.+136    	; 0x1486 <vfscanf+0x214>
    13fe:	3e c0       	rjmp	.+124    	; 0x147c <vfscanf+0x20a>
    1400:	c6 01       	movw	r24, r12
    1402:	0e 94 b3 07 	call	0xf66	; 0xf66 <skip_spaces>
    1406:	97 fd       	sbrc	r25, 7
    1408:	42 c0       	rjmp	.+132    	; 0x148e <vfscanf+0x21c>
    140a:	1f 36       	cpi	r17, 0x6F	; 111
    140c:	61 f1       	breq	.+88     	; 0x1466 <vfscanf+0x1f4>
    140e:	28 f4       	brcc	.+10     	; 0x141a <vfscanf+0x1a8>
    1410:	14 36       	cpi	r17, 0x64	; 100
    1412:	39 f1       	breq	.+78     	; 0x1462 <vfscanf+0x1f0>
    1414:	19 36       	cpi	r17, 0x69	; 105
    1416:	51 f1       	breq	.+84     	; 0x146c <vfscanf+0x1fa>
    1418:	28 c0       	rjmp	.+80     	; 0x146a <vfscanf+0x1f8>
    141a:	13 37       	cpi	r17, 0x73	; 115
    141c:	71 f0       	breq	.+28     	; 0x143a <vfscanf+0x1c8>
    141e:	15 37       	cpi	r17, 0x75	; 117
    1420:	01 f1       	breq	.+64     	; 0x1462 <vfscanf+0x1f0>
    1422:	23 c0       	rjmp	.+70     	; 0x146a <vfscanf+0x1f8>
    1424:	81 14       	cp	r8, r1
    1426:	91 04       	cpc	r9, r1
    1428:	29 f0       	breq	.+10     	; 0x1434 <vfscanf+0x1c2>
    142a:	f4 01       	movw	r30, r8
    142c:	60 82       	st	Z, r6
    142e:	c4 01       	movw	r24, r8
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	4c 01       	movw	r8, r24
    1434:	fa 94       	dec	r15
    1436:	ff 20       	and	r15, r15
    1438:	71 f0       	breq	.+28     	; 0x1456 <vfscanf+0x1e4>
    143a:	c6 01       	movw	r24, r12
    143c:	0e 94 88 0a 	call	0x1510	; 0x1510 <fgetc>
    1440:	3c 01       	movw	r6, r24
    1442:	97 fd       	sbrc	r25, 7
    1444:	08 c0       	rjmp	.+16     	; 0x1456 <vfscanf+0x1e4>
    1446:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <isspace>
    144a:	89 2b       	or	r24, r25
    144c:	59 f3       	breq	.-42     	; 0x1424 <vfscanf+0x1b2>
    144e:	b6 01       	movw	r22, r12
    1450:	c3 01       	movw	r24, r6
    1452:	0e 94 02 0b 	call	0x1604	; 0x1604 <ungetc>
    1456:	81 14       	cp	r8, r1
    1458:	91 04       	cpc	r9, r1
    145a:	a9 f0       	breq	.+42     	; 0x1486 <vfscanf+0x214>
    145c:	f4 01       	movw	r30, r8
    145e:	10 82       	st	Z, r1
    1460:	12 c0       	rjmp	.+36     	; 0x1486 <vfscanf+0x214>
    1462:	00 62       	ori	r16, 0x20	; 32
    1464:	03 c0       	rjmp	.+6      	; 0x146c <vfscanf+0x1fa>
    1466:	00 61       	ori	r16, 0x10	; 16
    1468:	01 c0       	rjmp	.+2      	; 0x146c <vfscanf+0x1fa>
    146a:	00 64       	ori	r16, 0x40	; 64
    146c:	20 2f       	mov	r18, r16
    146e:	a4 01       	movw	r20, r8
    1470:	6f 2d       	mov	r22, r15
    1472:	c6 01       	movw	r24, r12
    1474:	0e 94 cc 07 	call	0xf98	; 0xf98 <conv_int>
    1478:	81 11       	cpse	r24, r1
    147a:	05 c0       	rjmp	.+10     	; 0x1486 <vfscanf+0x214>
    147c:	f6 01       	movw	r30, r12
    147e:	83 81       	ldd	r24, Z+3	; 0x03
    1480:	80 73       	andi	r24, 0x30	; 48
    1482:	29 f4       	brne	.+10     	; 0x148e <vfscanf+0x21c>
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <vfscanf+0x220>
    1486:	00 fd       	sbrc	r16, 0
    1488:	0a cf       	rjmp	.-492    	; 0x129e <vfscanf+0x2c>
    148a:	53 94       	inc	r5
    148c:	08 cf       	rjmp	.-496    	; 0x129e <vfscanf+0x2c>
    148e:	55 20       	and	r5, r5
    1490:	19 f0       	breq	.+6      	; 0x1498 <vfscanf+0x226>
    1492:	85 2d       	mov	r24, r5
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <vfscanf+0x22a>
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	9f ef       	ldi	r25, 0xFF	; 255
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	ff 90       	pop	r15
    14a6:	ef 90       	pop	r14
    14a8:	df 90       	pop	r13
    14aa:	cf 90       	pop	r12
    14ac:	bf 90       	pop	r11
    14ae:	af 90       	pop	r10
    14b0:	9f 90       	pop	r9
    14b2:	8f 90       	pop	r8
    14b4:	7f 90       	pop	r7
    14b6:	6f 90       	pop	r6
    14b8:	5f 90       	pop	r5
    14ba:	08 95       	ret

000014bc <isspace>:
    14bc:	91 11       	cpse	r25, r1
    14be:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__ctype_isfalse>
    14c2:	80 32       	cpi	r24, 0x20	; 32
    14c4:	19 f0       	breq	.+6      	; 0x14cc <isspace+0x10>
    14c6:	89 50       	subi	r24, 0x09	; 9
    14c8:	85 50       	subi	r24, 0x05	; 5
    14ca:	c8 f7       	brcc	.-14     	; 0x14be <isspace+0x2>
    14cc:	08 95       	ret

000014ce <strchr_P>:
    14ce:	fc 01       	movw	r30, r24
    14d0:	05 90       	lpm	r0, Z+
    14d2:	06 16       	cp	r0, r22
    14d4:	21 f0       	breq	.+8      	; 0x14de <strchr_P+0x10>
    14d6:	00 20       	and	r0, r0
    14d8:	d9 f7       	brne	.-10     	; 0x14d0 <strchr_P+0x2>
    14da:	c0 01       	movw	r24, r0
    14dc:	08 95       	ret
    14de:	31 97       	sbiw	r30, 0x01	; 1
    14e0:	cf 01       	movw	r24, r30
    14e2:	08 95       	ret

000014e4 <strnlen_P>:
    14e4:	fc 01       	movw	r30, r24
    14e6:	05 90       	lpm	r0, Z+
    14e8:	61 50       	subi	r22, 0x01	; 1
    14ea:	70 40       	sbci	r23, 0x00	; 0
    14ec:	01 10       	cpse	r0, r1
    14ee:	d8 f7       	brcc	.-10     	; 0x14e6 <strnlen_P+0x2>
    14f0:	80 95       	com	r24
    14f2:	90 95       	com	r25
    14f4:	8e 0f       	add	r24, r30
    14f6:	9f 1f       	adc	r25, r31
    14f8:	08 95       	ret

000014fa <strnlen>:
    14fa:	fc 01       	movw	r30, r24
    14fc:	61 50       	subi	r22, 0x01	; 1
    14fe:	70 40       	sbci	r23, 0x00	; 0
    1500:	01 90       	ld	r0, Z+
    1502:	01 10       	cpse	r0, r1
    1504:	d8 f7       	brcc	.-10     	; 0x14fc <strnlen+0x2>
    1506:	80 95       	com	r24
    1508:	90 95       	com	r25
    150a:	8e 0f       	add	r24, r30
    150c:	9f 1f       	adc	r25, r31
    150e:	08 95       	ret

00001510 <fgetc>:
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	ec 01       	movw	r28, r24
    1516:	2b 81       	ldd	r18, Y+3	; 0x03
    1518:	20 ff       	sbrs	r18, 0
    151a:	33 c0       	rjmp	.+102    	; 0x1582 <fgetc+0x72>
    151c:	26 ff       	sbrs	r18, 6
    151e:	0a c0       	rjmp	.+20     	; 0x1534 <fgetc+0x24>
    1520:	2f 7b       	andi	r18, 0xBF	; 191
    1522:	2b 83       	std	Y+3, r18	; 0x03
    1524:	8e 81       	ldd	r24, Y+6	; 0x06
    1526:	9f 81       	ldd	r25, Y+7	; 0x07
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	8e 83       	std	Y+6, r24	; 0x06
    152c:	9f 83       	std	Y+7, r25	; 0x07
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	29 c0       	rjmp	.+82     	; 0x1586 <fgetc+0x76>
    1534:	22 ff       	sbrs	r18, 2
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <fgetc+0x46>
    1538:	e8 81       	ld	r30, Y
    153a:	f9 81       	ldd	r31, Y+1	; 0x01
    153c:	80 81       	ld	r24, Z
    153e:	08 2e       	mov	r0, r24
    1540:	00 0c       	add	r0, r0
    1542:	99 0b       	sbc	r25, r25
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	19 f4       	brne	.+6      	; 0x154e <fgetc+0x3e>
    1548:	20 62       	ori	r18, 0x20	; 32
    154a:	2b 83       	std	Y+3, r18	; 0x03
    154c:	1a c0       	rjmp	.+52     	; 0x1582 <fgetc+0x72>
    154e:	31 96       	adiw	r30, 0x01	; 1
    1550:	e8 83       	st	Y, r30
    1552:	f9 83       	std	Y+1, r31	; 0x01
    1554:	0e c0       	rjmp	.+28     	; 0x1572 <fgetc+0x62>
    1556:	ea 85       	ldd	r30, Y+10	; 0x0a
    1558:	fb 85       	ldd	r31, Y+11	; 0x0b
    155a:	09 95       	icall
    155c:	97 ff       	sbrs	r25, 7
    155e:	09 c0       	rjmp	.+18     	; 0x1572 <fgetc+0x62>
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	01 96       	adiw	r24, 0x01	; 1
    1564:	11 f0       	breq	.+4      	; 0x156a <fgetc+0x5a>
    1566:	80 e2       	ldi	r24, 0x20	; 32
    1568:	01 c0       	rjmp	.+2      	; 0x156c <fgetc+0x5c>
    156a:	80 e1       	ldi	r24, 0x10	; 16
    156c:	82 2b       	or	r24, r18
    156e:	8b 83       	std	Y+3, r24	; 0x03
    1570:	08 c0       	rjmp	.+16     	; 0x1582 <fgetc+0x72>
    1572:	2e 81       	ldd	r18, Y+6	; 0x06
    1574:	3f 81       	ldd	r19, Y+7	; 0x07
    1576:	2f 5f       	subi	r18, 0xFF	; 255
    1578:	3f 4f       	sbci	r19, 0xFF	; 255
    157a:	2e 83       	std	Y+6, r18	; 0x06
    157c:	3f 83       	std	Y+7, r19	; 0x07
    157e:	99 27       	eor	r25, r25
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <fgetc+0x76>
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	9f ef       	ldi	r25, 0xFF	; 255
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <fputc>:
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	fb 01       	movw	r30, r22
    1596:	23 81       	ldd	r18, Z+3	; 0x03
    1598:	21 fd       	sbrc	r18, 1
    159a:	03 c0       	rjmp	.+6      	; 0x15a2 <fputc+0x16>
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	9f ef       	ldi	r25, 0xFF	; 255
    15a0:	2c c0       	rjmp	.+88     	; 0x15fa <fputc+0x6e>
    15a2:	22 ff       	sbrs	r18, 2
    15a4:	16 c0       	rjmp	.+44     	; 0x15d2 <fputc+0x46>
    15a6:	46 81       	ldd	r20, Z+6	; 0x06
    15a8:	57 81       	ldd	r21, Z+7	; 0x07
    15aa:	24 81       	ldd	r18, Z+4	; 0x04
    15ac:	35 81       	ldd	r19, Z+5	; 0x05
    15ae:	42 17       	cp	r20, r18
    15b0:	53 07       	cpc	r21, r19
    15b2:	44 f4       	brge	.+16     	; 0x15c4 <fputc+0x38>
    15b4:	a0 81       	ld	r26, Z
    15b6:	b1 81       	ldd	r27, Z+1	; 0x01
    15b8:	9d 01       	movw	r18, r26
    15ba:	2f 5f       	subi	r18, 0xFF	; 255
    15bc:	3f 4f       	sbci	r19, 0xFF	; 255
    15be:	20 83       	st	Z, r18
    15c0:	31 83       	std	Z+1, r19	; 0x01
    15c2:	8c 93       	st	X, r24
    15c4:	26 81       	ldd	r18, Z+6	; 0x06
    15c6:	37 81       	ldd	r19, Z+7	; 0x07
    15c8:	2f 5f       	subi	r18, 0xFF	; 255
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	26 83       	std	Z+6, r18	; 0x06
    15ce:	37 83       	std	Z+7, r19	; 0x07
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <fputc+0x6e>
    15d2:	8b 01       	movw	r16, r22
    15d4:	ec 01       	movw	r28, r24
    15d6:	fb 01       	movw	r30, r22
    15d8:	00 84       	ldd	r0, Z+8	; 0x08
    15da:	f1 85       	ldd	r31, Z+9	; 0x09
    15dc:	e0 2d       	mov	r30, r0
    15de:	09 95       	icall
    15e0:	89 2b       	or	r24, r25
    15e2:	e1 f6       	brne	.-72     	; 0x159c <fputc+0x10>
    15e4:	d8 01       	movw	r26, r16
    15e6:	16 96       	adiw	r26, 0x06	; 6
    15e8:	8d 91       	ld	r24, X+
    15ea:	9c 91       	ld	r25, X
    15ec:	17 97       	sbiw	r26, 0x07	; 7
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	16 96       	adiw	r26, 0x06	; 6
    15f2:	8d 93       	st	X+, r24
    15f4:	9c 93       	st	X, r25
    15f6:	17 97       	sbiw	r26, 0x07	; 7
    15f8:	ce 01       	movw	r24, r28
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	08 95       	ret

00001604 <ungetc>:
    1604:	fb 01       	movw	r30, r22
    1606:	23 81       	ldd	r18, Z+3	; 0x03
    1608:	20 ff       	sbrs	r18, 0
    160a:	12 c0       	rjmp	.+36     	; 0x1630 <ungetc+0x2c>
    160c:	26 fd       	sbrc	r18, 6
    160e:	10 c0       	rjmp	.+32     	; 0x1630 <ungetc+0x2c>
    1610:	8f 3f       	cpi	r24, 0xFF	; 255
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	93 07       	cpc	r25, r19
    1616:	61 f0       	breq	.+24     	; 0x1630 <ungetc+0x2c>
    1618:	82 83       	std	Z+2, r24	; 0x02
    161a:	2f 7d       	andi	r18, 0xDF	; 223
    161c:	20 64       	ori	r18, 0x40	; 64
    161e:	23 83       	std	Z+3, r18	; 0x03
    1620:	26 81       	ldd	r18, Z+6	; 0x06
    1622:	37 81       	ldd	r19, Z+7	; 0x07
    1624:	21 50       	subi	r18, 0x01	; 1
    1626:	31 09       	sbc	r19, r1
    1628:	26 83       	std	Z+6, r18	; 0x06
    162a:	37 83       	std	Z+7, r19	; 0x07
    162c:	99 27       	eor	r25, r25
    162e:	08 95       	ret
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	9f ef       	ldi	r25, 0xFF	; 255
    1634:	08 95       	ret

00001636 <__ultoa_invert>:
    1636:	fa 01       	movw	r30, r20
    1638:	aa 27       	eor	r26, r26
    163a:	28 30       	cpi	r18, 0x08	; 8
    163c:	51 f1       	breq	.+84     	; 0x1692 <__ultoa_invert+0x5c>
    163e:	20 31       	cpi	r18, 0x10	; 16
    1640:	81 f1       	breq	.+96     	; 0x16a2 <__ultoa_invert+0x6c>
    1642:	e8 94       	clt
    1644:	6f 93       	push	r22
    1646:	6e 7f       	andi	r22, 0xFE	; 254
    1648:	6e 5f       	subi	r22, 0xFE	; 254
    164a:	7f 4f       	sbci	r23, 0xFF	; 255
    164c:	8f 4f       	sbci	r24, 0xFF	; 255
    164e:	9f 4f       	sbci	r25, 0xFF	; 255
    1650:	af 4f       	sbci	r26, 0xFF	; 255
    1652:	b1 e0       	ldi	r27, 0x01	; 1
    1654:	3e d0       	rcall	.+124    	; 0x16d2 <__ultoa_invert+0x9c>
    1656:	b4 e0       	ldi	r27, 0x04	; 4
    1658:	3c d0       	rcall	.+120    	; 0x16d2 <__ultoa_invert+0x9c>
    165a:	67 0f       	add	r22, r23
    165c:	78 1f       	adc	r23, r24
    165e:	89 1f       	adc	r24, r25
    1660:	9a 1f       	adc	r25, r26
    1662:	a1 1d       	adc	r26, r1
    1664:	68 0f       	add	r22, r24
    1666:	79 1f       	adc	r23, r25
    1668:	8a 1f       	adc	r24, r26
    166a:	91 1d       	adc	r25, r1
    166c:	a1 1d       	adc	r26, r1
    166e:	6a 0f       	add	r22, r26
    1670:	71 1d       	adc	r23, r1
    1672:	81 1d       	adc	r24, r1
    1674:	91 1d       	adc	r25, r1
    1676:	a1 1d       	adc	r26, r1
    1678:	20 d0       	rcall	.+64     	; 0x16ba <__ultoa_invert+0x84>
    167a:	09 f4       	brne	.+2      	; 0x167e <__ultoa_invert+0x48>
    167c:	68 94       	set
    167e:	3f 91       	pop	r19
    1680:	2a e0       	ldi	r18, 0x0A	; 10
    1682:	26 9f       	mul	r18, r22
    1684:	11 24       	eor	r1, r1
    1686:	30 19       	sub	r19, r0
    1688:	30 5d       	subi	r19, 0xD0	; 208
    168a:	31 93       	st	Z+, r19
    168c:	de f6       	brtc	.-74     	; 0x1644 <__ultoa_invert+0xe>
    168e:	cf 01       	movw	r24, r30
    1690:	08 95       	ret
    1692:	46 2f       	mov	r20, r22
    1694:	47 70       	andi	r20, 0x07	; 7
    1696:	40 5d       	subi	r20, 0xD0	; 208
    1698:	41 93       	st	Z+, r20
    169a:	b3 e0       	ldi	r27, 0x03	; 3
    169c:	0f d0       	rcall	.+30     	; 0x16bc <__ultoa_invert+0x86>
    169e:	c9 f7       	brne	.-14     	; 0x1692 <__ultoa_invert+0x5c>
    16a0:	f6 cf       	rjmp	.-20     	; 0x168e <__ultoa_invert+0x58>
    16a2:	46 2f       	mov	r20, r22
    16a4:	4f 70       	andi	r20, 0x0F	; 15
    16a6:	40 5d       	subi	r20, 0xD0	; 208
    16a8:	4a 33       	cpi	r20, 0x3A	; 58
    16aa:	18 f0       	brcs	.+6      	; 0x16b2 <__ultoa_invert+0x7c>
    16ac:	49 5d       	subi	r20, 0xD9	; 217
    16ae:	31 fd       	sbrc	r19, 1
    16b0:	40 52       	subi	r20, 0x20	; 32
    16b2:	41 93       	st	Z+, r20
    16b4:	02 d0       	rcall	.+4      	; 0x16ba <__ultoa_invert+0x84>
    16b6:	a9 f7       	brne	.-22     	; 0x16a2 <__ultoa_invert+0x6c>
    16b8:	ea cf       	rjmp	.-44     	; 0x168e <__ultoa_invert+0x58>
    16ba:	b4 e0       	ldi	r27, 0x04	; 4
    16bc:	a6 95       	lsr	r26
    16be:	97 95       	ror	r25
    16c0:	87 95       	ror	r24
    16c2:	77 95       	ror	r23
    16c4:	67 95       	ror	r22
    16c6:	ba 95       	dec	r27
    16c8:	c9 f7       	brne	.-14     	; 0x16bc <__ultoa_invert+0x86>
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	61 05       	cpc	r22, r1
    16ce:	71 05       	cpc	r23, r1
    16d0:	08 95       	ret
    16d2:	9b 01       	movw	r18, r22
    16d4:	ac 01       	movw	r20, r24
    16d6:	0a 2e       	mov	r0, r26
    16d8:	06 94       	lsr	r0
    16da:	57 95       	ror	r21
    16dc:	47 95       	ror	r20
    16de:	37 95       	ror	r19
    16e0:	27 95       	ror	r18
    16e2:	ba 95       	dec	r27
    16e4:	c9 f7       	brne	.-14     	; 0x16d8 <__ultoa_invert+0xa2>
    16e6:	62 0f       	add	r22, r18
    16e8:	73 1f       	adc	r23, r19
    16ea:	84 1f       	adc	r24, r20
    16ec:	95 1f       	adc	r25, r21
    16ee:	a0 1d       	adc	r26, r0
    16f0:	08 95       	ret

000016f2 <__ctype_isfalse>:
    16f2:	99 27       	eor	r25, r25
    16f4:	88 27       	eor	r24, r24

000016f6 <__ctype_istrue>:
    16f6:	08 95       	ret

000016f8 <ccp_write_io>:
    16f8:	dc 01       	movw	r26, r24
    16fa:	28 ed       	ldi	r18, 0xD8	; 216
    16fc:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7e0034>
    1700:	6c 93       	st	X, r22
    1702:	08 95       	ret

00001704 <_exit>:
    1704:	f8 94       	cli

00001706 <__stop_program>:
    1706:	ff cf       	rjmp	.-2      	; 0x1706 <__stop_program>

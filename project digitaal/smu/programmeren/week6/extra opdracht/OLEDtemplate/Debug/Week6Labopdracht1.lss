
Week6Labopdracht1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00804000  00000eca  00000f5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000409  00804012  00804012  00000f70  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000062c1  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000336d  00000000  00000000  000074cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bff  00000000  00000000  0000a83a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000844  00000000  00000000  0000c43c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e58  00000000  00000000  0000cc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003be1  00000000  00000000  0000ead8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  000126b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 9a 01 	jmp	0x334	; 0x334 <__ctors_end>
   4:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
   8:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
   c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  10:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  14:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  18:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  1c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  20:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  24:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  28:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  2c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  30:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  34:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  38:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  3c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  40:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  44:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  48:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  4c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  50:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  54:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  58:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  5c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  60:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  64:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  68:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  6c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  70:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  74:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  78:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  7c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  80:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  84:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  88:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  8c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  90:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  94:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  98:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  9c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  a0:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  a4:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  a8:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  ac:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  b0:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  b4:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  b8:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  bc:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  c0:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  c4:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  c8:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  cc:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  d0:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  d4:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  d8:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  dc:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  e0:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  e4:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  e8:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  ec:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>
  f0:	0c 94 b9 01 	jmp	0x372	; 0x372 <__bad_interrupt>

000000f4 <Font5x8>:
  f4:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
 104:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
 114:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
 124:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
 134:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
 144:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
 154:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
 164:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
 174:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
 184:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
 194:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
 1a4:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
 1b4:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
 1c4:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
 1d4:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
 1e4:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
 1f4:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
 204:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
 214:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
 224:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
 234:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
 244:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
 254:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
 264:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
 274:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
 284:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
 294:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
 2a4:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
 2b4:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
 2c4:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
 2d4:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
 2e4:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
 2f4:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
 304:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
 314:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
 324:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

00000334 <__ctors_end>:
 334:	11 24       	eor	r1, r1
 336:	1f be       	out	0x3f, r1	; 63
 338:	cf ef       	ldi	r28, 0xFF	; 255
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	df e7       	ldi	r29, 0x7F	; 127
 33e:	de bf       	out	0x3e, r29	; 62

00000340 <__do_copy_data>:
 340:	10 e4       	ldi	r17, 0x40	; 64
 342:	a0 e0       	ldi	r26, 0x00	; 0
 344:	b0 e4       	ldi	r27, 0x40	; 64
 346:	ea ec       	ldi	r30, 0xCA	; 202
 348:	fe e0       	ldi	r31, 0x0E	; 14
 34a:	00 e0       	ldi	r16, 0x00	; 0
 34c:	0b bf       	out	0x3b, r16	; 59
 34e:	02 c0       	rjmp	.+4      	; 0x354 <__do_copy_data+0x14>
 350:	07 90       	elpm	r0, Z+
 352:	0d 92       	st	X+, r0
 354:	a2 31       	cpi	r26, 0x12	; 18
 356:	b1 07       	cpc	r27, r17
 358:	d9 f7       	brne	.-10     	; 0x350 <__do_copy_data+0x10>

0000035a <__do_clear_bss>:
 35a:	24 e4       	ldi	r18, 0x44	; 68
 35c:	a2 e1       	ldi	r26, 0x12	; 18
 35e:	b0 e4       	ldi	r27, 0x40	; 64
 360:	01 c0       	rjmp	.+2      	; 0x364 <.do_clear_bss_start>

00000362 <.do_clear_bss_loop>:
 362:	1d 92       	st	X+, r1

00000364 <.do_clear_bss_start>:
 364:	ab 31       	cpi	r26, 0x1B	; 27
 366:	b2 07       	cpc	r27, r18
 368:	e1 f7       	brne	.-8      	; 0x362 <.do_clear_bss_loop>
 36a:	0e 94 bb 01 	call	0x376	; 0x376 <main>
 36e:	0c 94 63 07 	jmp	0xec6	; 0xec6 <_exit>

00000372 <__bad_interrupt>:
 372:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000376 <main>:
#include "OLED/SSD1306.h"
#include "OLED/Font5x8.h"


int main(void)
{
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	2a 97       	sbiw	r28, 0x0a	; 10
 380:	cd bf       	out	0x3d, r28	; 61
 382:	de bf       	out	0x3e, r29	; 62
	GLCD_Setup();
 384:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <GLCD_Setup>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	48 e0       	ldi	r20, 0x08	; 8
 38c:	65 e0       	ldi	r22, 0x05	; 5
 38e:	84 ef       	ldi	r24, 0xF4	; 244
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 3b 03 	call	0x676	; 0x676 <GLCD_SetFont>
	
	int i = 0;
	char buffer[10];
	
	GLCD_GotoXY(10,25);
 396:	69 e1       	ldi	r22, 0x19	; 25
 398:	8a e0       	ldi	r24, 0x0A	; 10
 39a:	0e 94 cb 02 	call	0x596	; 0x596 <GLCD_GotoXY>
	GLCD_PrintString("Hello World!");
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e4       	ldi	r25, 0x40	; 64
 3a2:	0e 94 6f 04 	call	0x8de	; 0x8de <GLCD_PrintString>
int main(void)
{
	GLCD_Setup();
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
	
	int i = 0;
 3a6:	00 e0       	ldi	r16, 0x00	; 0
 3a8:	10 e0       	ldi	r17, 0x00	; 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <main+0x3a>
		_delay_ms(1000);
		i++;
		
		if(i==10)
		{
			i = 0;
 3ac:	00 e0       	ldi	r16, 0x00	; 0
 3ae:	10 e0       	ldi	r17, 0x00	; 0
	GLCD_GotoXY(10,25);
	GLCD_PrintString("Hello World!");
	
	while(1)
	{
		GLCD_GotoXY(90,50);
 3b0:	62 e3       	ldi	r22, 0x32	; 50
 3b2:	8a e5       	ldi	r24, 0x5A	; 90
 3b4:	0e 94 cb 02 	call	0x596	; 0x596 <GLCD_GotoXY>
		sprintf(buffer, "%3d", i);
 3b8:	1f 93       	push	r17
 3ba:	0f 93       	push	r16
 3bc:	8d e0       	ldi	r24, 0x0D	; 13
 3be:	90 e4       	ldi	r25, 0x40	; 64
 3c0:	9f 93       	push	r25
 3c2:	8f 93       	push	r24
 3c4:	ce 01       	movw	r24, r28
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	7c 01       	movw	r14, r24
 3ca:	9f 93       	push	r25
 3cc:	8f 93       	push	r24
 3ce:	0e 94 86 04 	call	0x90c	; 0x90c <sprintf>
		GLCD_PrintString(buffer);
 3d2:	c7 01       	movw	r24, r14
 3d4:	0e 94 6f 04 	call	0x8de	; 0x8de <GLCD_PrintString>
		GLCD_Render();
 3d8:	0e 94 9d 02 	call	0x53a	; 0x53a <GLCD_Render>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3dc:	9f ef       	ldi	r25, 0xFF	; 255
 3de:	24 e3       	ldi	r18, 0x34	; 52
 3e0:	8c e0       	ldi	r24, 0x0C	; 12
 3e2:	91 50       	subi	r25, 0x01	; 1
 3e4:	20 40       	sbci	r18, 0x00	; 0
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <main+0x6c>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <main+0x76>
 3ec:	00 00       	nop
		_delay_ms(1000);
		i++;
 3ee:	0f 5f       	subi	r16, 0xFF	; 255
 3f0:	1f 4f       	sbci	r17, 0xFF	; 255
		
		if(i==10)
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	0f 90       	pop	r0
 3fe:	0a 30       	cpi	r16, 0x0A	; 10
 400:	11 05       	cpc	r17, r1
 402:	b1 f6       	brne	.-84     	; 0x3b0 <main+0x3a>
 404:	d3 cf       	rjmp	.-90     	; 0x3ac <main+0x36>

00000406 <i2c_0_WaitW>:
                break;
        }
    }
	
    return retVal;
}
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 40c:	90 7c       	andi	r25, 0xC0	; 192
 40e:	31 f0       	breq	.+12     	; 0x41c <i2c_0_WaitW+0x16>
 410:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 414:	84 fd       	sbrc	r24, 4
 416:	07 c0       	rjmp	.+14     	; 0x426 <i2c_0_WaitW+0x20>
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	08 c0       	rjmp	.+16     	; 0x42c <i2c_0_WaitW+0x26>
 41c:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 420:	9c 70       	andi	r25, 0x0C	; 12
 422:	19 f4       	brne	.+6      	; 0x42a <i2c_0_WaitW+0x24>
 424:	03 c0       	rjmp	.+6      	; 0x42c <i2c_0_WaitW+0x26>
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	01 c0       	rjmp	.+2      	; 0x42c <i2c_0_WaitW+0x26>
 42a:	84 e0       	ldi	r24, 0x04	; 4
 42c:	88 23       	and	r24, r24
 42e:	61 f3       	breq	.-40     	; 0x408 <i2c_0_WaitW+0x2>
 430:	08 95       	ret

00000432 <I2C_0_Init>:
 432:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <__TEXT_REGION_LENGTH__+0x7e05e5>
 436:	e0 e0       	ldi	r30, 0x00	; 0
 438:	f9 e0       	ldi	r31, 0x09	; 9
 43a:	88 e4       	ldi	r24, 0x48	; 72
 43c:	86 83       	std	Z+6, r24	; 0x06
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	83 83       	std	Z+3, r24	; 0x03
 442:	17 82       	std	Z+7, r1	; 0x07
 444:	10 86       	std	Z+8, r1	; 0x08
 446:	85 83       	std	Z+5, r24	; 0x05
 448:	08 95       	ret

0000044a <I2C_0_SendData>:
 44a:	ff 92       	push	r15
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	c6 2f       	mov	r28, r22
 456:	8a 01       	movw	r16, r20
 458:	d2 2f       	mov	r29, r18
 45a:	8e 7f       	andi	r24, 0xFE	; 254
 45c:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
 460:	0e 94 03 02 	call	0x406	; 0x406 <i2c_0_WaitW>
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	11 f5       	brne	.+68     	; 0x4ac <I2C_0_SendData+0x62>
 468:	c0 93 08 09 	sts	0x0908, r28	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
 46c:	0e 94 03 02 	call	0x406	; 0x406 <i2c_0_WaitW>
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	f1 f4       	brne	.+60     	; 0x4b0 <I2C_0_SendData+0x66>
 474:	dd 23       	and	r29, r29
 476:	f1 f0       	breq	.+60     	; 0x4b4 <I2C_0_SendData+0x6a>
 478:	01 15       	cp	r16, r1
 47a:	11 05       	cpc	r17, r1
 47c:	79 f4       	brne	.+30     	; 0x49c <I2C_0_SendData+0x52>
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	1c c0       	rjmp	.+56     	; 0x4ba <I2C_0_SendData+0x70>
 482:	f8 01       	movw	r30, r16
 484:	80 81       	ld	r24, Z
 486:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
 48a:	0e 94 03 02 	call	0x406	; 0x406 <i2c_0_WaitW>
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	99 f4       	brne	.+38     	; 0x4b8 <I2C_0_SendData+0x6e>
 492:	cf 5f       	subi	r28, 0xFF	; 255
 494:	0f 5f       	subi	r16, 0xFF	; 255
 496:	1f 4f       	sbci	r17, 0xFF	; 255
 498:	df 2d       	mov	r29, r15
 49a:	01 c0       	rjmp	.+2      	; 0x49e <I2C_0_SendData+0x54>
 49c:	c0 e0       	ldi	r28, 0x00	; 0
 49e:	ff 24       	eor	r15, r15
 4a0:	fa 94       	dec	r15
 4a2:	fd 0e       	add	r15, r29
 4a4:	d1 11       	cpse	r29, r1
 4a6:	ed cf       	rjmp	.-38     	; 0x482 <I2C_0_SendData+0x38>
 4a8:	8c 2f       	mov	r24, r28
 4aa:	07 c0       	rjmp	.+14     	; 0x4ba <I2C_0_SendData+0x70>
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <I2C_0_SendData+0x70>
 4b0:	8f ef       	ldi	r24, 0xFF	; 255
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <I2C_0_SendData+0x70>
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <I2C_0_SendData+0x70>
 4b8:	8c 2f       	mov	r24, r28
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	ff 90       	pop	r15
 4c4:	08 95       	ret

000004c6 <I2C_0_EndSession>:

void I2C_0_EndSession(void)
{
    TWI0.MCTRLB = TWI_MCMD_STOP_gc;
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
 4cc:	08 95       	ret

000004ce <GLCD_BufferWrite>:
		width += GLCD_GetWidthChar(r);
		r = pgm_read_byte(Text++);
	}
	
	return width;
}
 4ce:	66 95       	lsr	r22
 4d0:	66 95       	lsr	r22
 4d2:	66 95       	lsr	r22
 4d4:	e8 2f       	mov	r30, r24
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 e8       	ldi	r24, 0x80	; 128
 4da:	68 9f       	mul	r22, r24
 4dc:	e0 0d       	add	r30, r0
 4de:	f1 1d       	adc	r31, r1
 4e0:	11 24       	eor	r1, r1
 4e2:	e5 5e       	subi	r30, 0xE5	; 229
 4e4:	ff 4b       	sbci	r31, 0xBF	; 191
 4e6:	40 83       	st	Z, r20
 4e8:	08 95       	ret

000004ea <GLCD_BufferRead>:
 4ea:	66 95       	lsr	r22
 4ec:	66 95       	lsr	r22
 4ee:	66 95       	lsr	r22
 4f0:	e8 2f       	mov	r30, r24
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	80 e8       	ldi	r24, 0x80	; 128
 4f6:	68 9f       	mul	r22, r24
 4f8:	e0 0d       	add	r30, r0
 4fa:	f1 1d       	adc	r31, r1
 4fc:	11 24       	eor	r1, r1
 4fe:	e5 5e       	subi	r30, 0xE5	; 229
 500:	ff 4b       	sbci	r31, 0xBF	; 191
 502:	80 81       	ld	r24, Z
 504:	08 95       	ret

00000506 <GLCD_Send>:
 506:	24 2f       	mov	r18, r20
 508:	ab 01       	movw	r20, r22
 50a:	68 2f       	mov	r22, r24
 50c:	88 e7       	ldi	r24, 0x78	; 120
 50e:	0e 94 25 02 	call	0x44a	; 0x44a <I2C_0_SendData>
 512:	0e 94 63 02 	call	0x4c6	; 0x4c6 <I2C_0_EndSession>
 516:	08 95       	ret

00000518 <GLCD_SendCommand>:
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	1f 92       	push	r1
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
 522:	89 83       	std	Y+1, r24	; 0x01
 524:	41 e0       	ldi	r20, 0x01	; 1
 526:	be 01       	movw	r22, r28
 528:	6f 5f       	subi	r22, 0xFF	; 255
 52a:	7f 4f       	sbci	r23, 0xFF	; 255
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	0e 94 83 02 	call	0x506	; 0x506 <GLCD_Send>
 532:	0f 90       	pop	r0
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <GLCD_Render>:
 53a:	cf 93       	push	r28
 53c:	81 e2       	ldi	r24, 0x21	; 33
 53e:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 548:	8f e7       	ldi	r24, 0x7F	; 127
 54a:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 54e:	82 e2       	ldi	r24, 0x22	; 34
 550:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 55a:	87 e0       	ldi	r24, 0x07	; 7
 55c:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 560:	c0 e0       	ldi	r28, 0x00	; 0
 562:	0b c0       	rjmp	.+22     	; 0x57a <GLCD_Render+0x40>
 564:	80 e1       	ldi	r24, 0x10	; 16
 566:	c8 9f       	mul	r28, r24
 568:	b0 01       	movw	r22, r0
 56a:	11 24       	eor	r1, r1
 56c:	65 5e       	subi	r22, 0xE5	; 229
 56e:	7f 4b       	sbci	r23, 0xBF	; 191
 570:	40 e1       	ldi	r20, 0x10	; 16
 572:	80 e4       	ldi	r24, 0x40	; 64
 574:	0e 94 83 02 	call	0x506	; 0x506 <GLCD_Send>
 578:	cf 5f       	subi	r28, 0xFF	; 255
 57a:	c0 34       	cpi	r28, 0x40	; 64
 57c:	98 f3       	brcs	.-26     	; 0x564 <GLCD_Render+0x2a>
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <GLCD_GotoX>:
 582:	88 23       	and	r24, r24
 584:	14 f0       	brlt	.+4      	; 0x58a <GLCD_GotoX+0x8>
 586:	80 93 12 40 	sts	0x4012, r24	; 0x804012 <__data_end>
 58a:	08 95       	ret

0000058c <GLCD_GotoY>:
 58c:	80 34       	cpi	r24, 0x40	; 64
 58e:	10 f4       	brcc	.+4      	; 0x594 <GLCD_GotoY+0x8>
 590:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <__data_end+0x1>
 594:	08 95       	ret

00000596 <GLCD_GotoXY>:
 596:	cf 93       	push	r28
 598:	c6 2f       	mov	r28, r22
 59a:	0e 94 c1 02 	call	0x582	; 0x582 <GLCD_GotoX>
 59e:	8c 2f       	mov	r24, r28
 5a0:	0e 94 c6 02 	call	0x58c	; 0x58c <GLCD_GotoY>
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <GLCD_Setup>:
 5a8:	2f ef       	ldi	r18, 0xFF	; 255
 5aa:	81 ee       	ldi	r24, 0xE1	; 225
 5ac:	94 e0       	ldi	r25, 0x04	; 4
 5ae:	21 50       	subi	r18, 0x01	; 1
 5b0:	80 40       	sbci	r24, 0x00	; 0
 5b2:	90 40       	sbci	r25, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <GLCD_Setup+0x6>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <GLCD_Setup+0x10>
 5b8:	00 00       	nop
 5ba:	0e 94 19 02 	call	0x432	; 0x432 <I2C_0_Init>
 5be:	8e ea       	ldi	r24, 0xAE	; 174
 5c0:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 5c4:	85 ed       	ldi	r24, 0xD5	; 213
 5c6:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 5ca:	80 ef       	ldi	r24, 0xF0	; 240
 5cc:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 5d0:	88 ea       	ldi	r24, 0xA8	; 168
 5d2:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 5d6:	8f e3       	ldi	r24, 0x3F	; 63
 5d8:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 5dc:	83 ed       	ldi	r24, 0xD3	; 211
 5de:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 5e8:	8d e8       	ldi	r24, 0x8D	; 141
 5ea:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 5ee:	84 e1       	ldi	r24, 0x14	; 20
 5f0:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 5f4:	80 e4       	ldi	r24, 0x40	; 64
 5f6:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 5fa:	80 e2       	ldi	r24, 0x20	; 32
 5fc:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 606:	81 ea       	ldi	r24, 0xA1	; 161
 608:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 60c:	88 ec       	ldi	r24, 0xC8	; 200
 60e:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 612:	8a ed       	ldi	r24, 0xDA	; 218
 614:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 618:	82 e1       	ldi	r24, 0x12	; 18
 61a:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 61e:	81 e8       	ldi	r24, 0x81	; 129
 620:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 624:	8f ef       	ldi	r24, 0xFF	; 255
 626:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 62a:	89 ed       	ldi	r24, 0xD9	; 217
 62c:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 630:	81 ef       	ldi	r24, 0xF1	; 241
 632:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 636:	8b ed       	ldi	r24, 0xDB	; 219
 638:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 63c:	80 e2       	ldi	r24, 0x20	; 32
 63e:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 642:	84 ea       	ldi	r24, 0xA4	; 164
 644:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 648:	86 ea       	ldi	r24, 0xA6	; 166
 64a:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 64e:	8e e2       	ldi	r24, 0x2E	; 46
 650:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 654:	8f ea       	ldi	r24, 0xAF	; 175
 656:	0e 94 8c 02 	call	0x518	; 0x518 <GLCD_SendCommand>
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	0e 94 cb 02 	call	0x596	; 0x596 <GLCD_GotoXY>
 662:	e2 e1       	ldi	r30, 0x12	; 18
 664:	f0 e4       	ldi	r31, 0x40	; 64
 666:	86 ea       	ldi	r24, 0xA6	; 166
 668:	82 83       	std	Z+2, r24	; 0x02
 66a:	17 82       	std	Z+7, r1	; 0x07
 66c:	16 82       	std	Z+6, r1	; 0x06
 66e:	15 82       	std	Z+5, r1	; 0x05
 670:	11 82       	std	Z+1, r1	; 0x01
 672:	10 82       	st	Z, r1
 674:	08 95       	ret

00000676 <GLCD_SetFont>:
 676:	66 23       	and	r22, r22
 678:	e4 f0       	brlt	.+56     	; 0x6b2 <GLCD_SetFont+0x3c>
 67a:	40 34       	cpi	r20, 0x40	; 64
 67c:	d0 f4       	brcc	.+52     	; 0x6b2 <GLCD_SetFont+0x3c>
 67e:	22 30       	cpi	r18, 0x02	; 2
 680:	c0 f4       	brcc	.+48     	; 0x6b2 <GLCD_SetFont+0x3c>
 682:	e2 e1       	ldi	r30, 0x12	; 18
 684:	f0 e4       	ldi	r31, 0x40	; 64
 686:	83 83       	std	Z+3, r24	; 0x03
 688:	94 83       	std	Z+4, r25	; 0x04
 68a:	65 83       	std	Z+5, r22	; 0x05
 68c:	46 83       	std	Z+6, r20	; 0x06
 68e:	50 e0       	ldi	r21, 0x00	; 0
 690:	41 50       	subi	r20, 0x01	; 1
 692:	51 09       	sbc	r21, r1
 694:	ca 01       	movw	r24, r20
 696:	99 23       	and	r25, r25
 698:	0c f4       	brge	.+2      	; 0x69c <GLCD_SetFont+0x26>
 69a:	07 96       	adiw	r24, 0x07	; 7
 69c:	95 95       	asr	r25
 69e:	87 95       	ror	r24
 6a0:	95 95       	asr	r25
 6a2:	87 95       	ror	r24
 6a4:	95 95       	asr	r25
 6a6:	87 95       	ror	r24
 6a8:	e2 e1       	ldi	r30, 0x12	; 18
 6aa:	f0 e4       	ldi	r31, 0x40	; 64
 6ac:	8f 5f       	subi	r24, 0xFF	; 255
 6ae:	87 83       	std	Z+7, r24	; 0x07
 6b0:	20 87       	std	Z+8, r18	; 0x08
 6b2:	08 95       	ret

000006b4 <GLCD_PrintChar>:

void GLCD_PrintChar(char Character)
{
 6b4:	4f 92       	push	r4
 6b6:	5f 92       	push	r5
 6b8:	6f 92       	push	r6
 6ba:	7f 92       	push	r7
 6bc:	8f 92       	push	r8
 6be:	9f 92       	push	r9
 6c0:	af 92       	push	r10
 6c2:	bf 92       	push	r11
 6c4:	cf 92       	push	r12
 6c6:	df 92       	push	r13
 6c8:	ef 92       	push	r14
 6ca:	ff 92       	push	r15
 6cc:	0f 93       	push	r16
 6ce:	1f 93       	push	r17
 6d0:	cf 93       	push	r28
 6d2:	df 93       	push	r29
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
 6d4:	a2 e1       	ldi	r26, 0x12	; 18
 6d6:	b0 e4       	ldi	r27, 0x40	; 64
 6d8:	5c 90       	ld	r5, X
	y = y2 = __GLCD.Y;
 6da:	11 96       	adiw	r26, 0x01	; 1
 6dc:	4c 90       	ld	r4, X
 6de:	11 97       	sbiw	r26, 0x01	; 1
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
 6e0:	80 52       	subi	r24, 0x20	; 32
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
 6e2:	15 96       	adiw	r26, 0x05	; 5
 6e4:	9c 91       	ld	r25, X
 6e6:	15 97       	sbiw	r26, 0x05	; 5
 6e8:	17 96       	adiw	r26, 0x07	; 7
 6ea:	2c 91       	ld	r18, X
 6ec:	17 97       	sbiw	r26, 0x07	; 7
 6ee:	92 9f       	mul	r25, r18
 6f0:	90 01       	movw	r18, r0
 6f2:	11 24       	eor	r1, r1
 6f4:	2f 5f       	subi	r18, 0xFF	; 255
 6f6:	3f 4f       	sbci	r19, 0xFF	; 255
 6f8:	82 9f       	mul	r24, r18
 6fa:	a0 01       	movw	r20, r0
 6fc:	83 9f       	mul	r24, r19
 6fe:	50 0d       	add	r21, r0
 700:	11 24       	eor	r1, r1
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
 702:	13 96       	adiw	r26, 0x03	; 3
 704:	ed 91       	ld	r30, X+
 706:	fc 91       	ld	r31, X
 708:	14 97       	sbiw	r26, 0x04	; 4
 70a:	5a 01       	movw	r10, r20
 70c:	8f ef       	ldi	r24, 0xFF	; 255
 70e:	a8 1a       	sub	r10, r24
 710:	b8 0a       	sbc	r11, r24
 712:	e4 0f       	add	r30, r20
 714:	f5 1f       	adc	r31, r21
 716:	74 90       	lpm	r7, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
 718:	84 2d       	mov	r24, r4
 71a:	87 70       	andi	r24, 0x07	; 7
 71c:	98 2e       	mov	r9, r24
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
 71e:	64 2c       	mov	r6, r4
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
 720:	81 2c       	mov	r8, r1
 722:	5f c0       	rjmp	.+190    	; 0x7e2 <GLCD_PrintChar+0x12e>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
 724:	66 2d       	mov	r22, r6
 726:	85 2d       	mov	r24, r5
 728:	0e 94 cb 02 	call	0x596	; 0x596 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
 72c:	75 01       	movw	r14, r10
 72e:	e8 0c       	add	r14, r8
 730:	f1 1c       	adc	r15, r1
		fontReadPrev = fontRead - 1;
 732:	67 01       	movw	r12, r14
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	c8 1a       	sub	r12, r24
 738:	d1 08       	sbc	r13, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
 73a:	10 e0       	ldi	r17, 0x00	; 0
 73c:	41 c0       	rjmp	.+130    	; 0x7c0 <GLCD_PrintChar+0x10c>
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
 73e:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <__data_end+0x3>
 742:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <__data_end+0x4>
 746:	fc 01       	movw	r30, r24
 748:	ee 0d       	add	r30, r14
 74a:	ff 1d       	adc	r31, r15
 74c:	24 91       	lpm	r18, Z
			
			//Shift byte
			data <<= overflow;
 74e:	49 2d       	mov	r20, r9
 750:	50 e0       	ldi	r21, 0x00	; 0
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	09 2c       	mov	r0, r9
 756:	02 c0       	rjmp	.+4      	; 0x75c <GLCD_PrintChar+0xa8>
 758:	22 0f       	add	r18, r18
 75a:	33 1f       	adc	r19, r19
 75c:	0a 94       	dec	r0
 75e:	e2 f7       	brpl	.-8      	; 0x758 <GLCD_PrintChar+0xa4>
 760:	02 2f       	mov	r16, r18
			
			//Merge byte with previous one
			if (j > 0)
 762:	88 20       	and	r8, r8
 764:	a1 f0       	breq	.+40     	; 0x78e <GLCD_PrintChar+0xda>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
 766:	fc 01       	movw	r30, r24
 768:	ec 0d       	add	r30, r12
 76a:	fd 1d       	adc	r31, r13
 76c:	e4 91       	lpm	r30, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
 76e:	88 e0       	ldi	r24, 0x08	; 8
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	84 1b       	sub	r24, r20
 774:	95 0b       	sbc	r25, r21
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	02 c0       	rjmp	.+4      	; 0x77e <GLCD_PrintChar+0xca>
 77a:	f5 95       	asr	r31
 77c:	e7 95       	ror	r30
 77e:	8a 95       	dec	r24
 780:	e2 f7       	brpl	.-8      	; 0x77a <GLCD_PrintChar+0xc6>
				data |= dataPrev;
 782:	0e 2f       	mov	r16, r30
 784:	02 2b       	or	r16, r18
				fontReadPrev += __GLCD.Font.Lines;
 786:	80 91 19 40 	lds	r24, 0x4019	; 0x804019 <__data_end+0x7>
 78a:	c8 0e       	add	r12, r24
 78c:	d1 1c       	adc	r13, r1
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
 78e:	80 91 1a 40 	lds	r24, 0x401A	; 0x80401a <__data_end+0x8>
 792:	81 30       	cpi	r24, 0x01	; 1
 794:	39 f4       	brne	.+14     	; 0x7a4 <GLCD_PrintChar+0xf0>
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
 796:	e2 e1       	ldi	r30, 0x12	; 18
 798:	f0 e4       	ldi	r31, 0x40	; 64
 79a:	61 81       	ldd	r22, Z+1	; 0x01
 79c:	80 81       	ld	r24, Z
 79e:	0e 94 75 02 	call	0x4ea	; 0x4ea <GLCD_BufferRead>
 7a2:	08 2b       	or	r16, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
 7a4:	c2 e1       	ldi	r28, 0x12	; 18
 7a6:	d0 e4       	ldi	r29, 0x40	; 64
 7a8:	69 81       	ldd	r22, Y+1	; 0x01
 7aa:	88 81       	ld	r24, Y
 7ac:	91 e0       	ldi	r25, 0x01	; 1
 7ae:	98 0f       	add	r25, r24
 7b0:	98 83       	st	Y, r25
 7b2:	40 2f       	mov	r20, r16
 7b4:	0e 94 67 02 	call	0x4ce	; 0x4ce <GLCD_BufferWrite>
			
			//Increase index
			fontRead += __GLCD.Font.Lines;
 7b8:	8f 81       	ldd	r24, Y+7	; 0x07
 7ba:	e8 0e       	add	r14, r24
 7bc:	f1 1c       	adc	r15, r1
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
 7be:	1f 5f       	subi	r17, 0xFF	; 255
 7c0:	17 15       	cp	r17, r7
 7c2:	08 f4       	brcc	.+2      	; 0x7c6 <GLCD_PrintChar+0x112>
 7c4:	bc cf       	rjmp	.-136    	; 0x73e <GLCD_PrintChar+0x8a>
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
 7c6:	80 91 1a 40 	lds	r24, 0x401A	; 0x80401a <__data_end+0x8>
 7ca:	81 11       	cpse	r24, r1
 7cc:	07 c0       	rjmp	.+14     	; 0x7dc <GLCD_PrintChar+0x128>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
 7ce:	e2 e1       	ldi	r30, 0x12	; 18
 7d0:	f0 e4       	ldi	r31, 0x40	; 64
 7d2:	40 e0       	ldi	r20, 0x00	; 0
 7d4:	61 81       	ldd	r22, Z+1	; 0x01
 7d6:	80 81       	ld	r24, Z
 7d8:	0e 94 67 02 	call	0x4ce	; 0x4ce <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
 7dc:	88 e0       	ldi	r24, 0x08	; 8
 7de:	68 0e       	add	r6, r24
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
 7e0:	83 94       	inc	r8
 7e2:	80 91 19 40 	lds	r24, 0x4019	; 0x804019 <__data_end+0x7>
 7e6:	88 16       	cp	r8, r24
 7e8:	08 f4       	brcc	.+2      	; 0x7ec <GLCD_PrintChar+0x138>
 7ea:	9c cf       	rjmp	.-200    	; 0x724 <GLCD_PrintChar+0x70>
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_GetLine(y2) != __GLCD_GetLine((y2 + __GLCD.Font.Height - 1)) && y < __GLCD_Screen_Height)
 7ec:	24 2d       	mov	r18, r4
 7ee:	26 95       	lsr	r18
 7f0:	26 95       	lsr	r18
 7f2:	26 95       	lsr	r18
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	80 91 18 40 	lds	r24, 0x4018	; 0x804018 <__data_end+0x6>
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	84 0d       	add	r24, r4
 7fe:	91 1d       	adc	r25, r1
 800:	01 97       	sbiw	r24, 0x01	; 1
 802:	ac 01       	movw	r20, r24
 804:	12 f4       	brpl	.+4      	; 0x80a <GLCD_PrintChar+0x156>
 806:	49 5f       	subi	r20, 0xF9	; 249
 808:	5f 4f       	sbci	r21, 0xFF	; 255
 80a:	55 95       	asr	r21
 80c:	47 95       	ror	r20
 80e:	55 95       	asr	r21
 810:	47 95       	ror	r20
 812:	55 95       	asr	r21
 814:	47 95       	ror	r20
 816:	24 17       	cp	r18, r20
 818:	35 07       	cpc	r19, r21
 81a:	09 f4       	brne	.+2      	; 0x81e <GLCD_PrintChar+0x16a>
 81c:	49 c0       	rjmp	.+146    	; 0x8b0 <GLCD_PrintChar+0x1fc>
 81e:	8f e3       	ldi	r24, 0x3F	; 63
 820:	86 15       	cp	r24, r6
 822:	08 f4       	brcc	.+2      	; 0x826 <GLCD_PrintChar+0x172>
 824:	45 c0       	rjmp	.+138    	; 0x8b0 <GLCD_PrintChar+0x1fc>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
 826:	66 2d       	mov	r22, r6
 828:	85 2d       	mov	r24, r5
 82a:	0e 94 cb 02 	call	0x596	; 0x596 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
 82e:	a8 0c       	add	r10, r8
 830:	b1 1c       	adc	r11, r1
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	a8 1a       	sub	r10, r24
 836:	b1 08       	sbc	r11, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
 838:	10 e0       	ldi	r17, 0x00	; 0
 83a:	2d c0       	rjmp	.+90     	; 0x896 <GLCD_PrintChar+0x1e2>
		{
			//Read byte
			data = 0; // JK: reading old buffer data gives font mess: removed line data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
 83c:	a2 e1       	ldi	r26, 0x12	; 18
 83e:	b0 e4       	ldi	r27, 0x40	; 64
 840:	13 96       	adiw	r26, 0x03	; 3
 842:	ed 91       	ld	r30, X+
 844:	fc 91       	ld	r31, X
 846:	14 97       	sbiw	r26, 0x04	; 4
 848:	ea 0d       	add	r30, r10
 84a:	fb 1d       	adc	r31, r11
 84c:	c4 91       	lpm	r28, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
 84e:	88 e0       	ldi	r24, 0x08	; 8
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	89 19       	sub	r24, r9
 854:	91 09       	sbc	r25, r1
 856:	d0 e0       	ldi	r29, 0x00	; 0
 858:	02 c0       	rjmp	.+4      	; 0x85e <GLCD_PrintChar+0x1aa>
 85a:	d5 95       	asr	r29
 85c:	c7 95       	ror	r28
 85e:	8a 95       	dec	r24
 860:	e2 f7       	brpl	.-8      	; 0x85a <GLCD_PrintChar+0x1a6>
 862:	4c 2f       	mov	r20, r28
			data |= dataPrev;
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
 864:	18 96       	adiw	r26, 0x08	; 8
 866:	8c 91       	ld	r24, X
 868:	18 97       	sbiw	r26, 0x08	; 8
 86a:	81 30       	cpi	r24, 0x01	; 1
 86c:	39 f4       	brne	.+14     	; 0x87c <GLCD_PrintChar+0x1c8>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
 86e:	fd 01       	movw	r30, r26
 870:	61 81       	ldd	r22, Z+1	; 0x01
 872:	80 81       	ld	r24, Z
 874:	0e 94 75 02 	call	0x4ea	; 0x4ea <GLCD_BufferRead>
 878:	4c 2f       	mov	r20, r28
 87a:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
 87c:	c2 e1       	ldi	r28, 0x12	; 18
 87e:	d0 e4       	ldi	r29, 0x40	; 64
 880:	69 81       	ldd	r22, Y+1	; 0x01
 882:	88 81       	ld	r24, Y
 884:	91 e0       	ldi	r25, 0x01	; 1
 886:	98 0f       	add	r25, r24
 888:	98 83       	st	Y, r25
 88a:	0e 94 67 02 	call	0x4ce	; 0x4ce <GLCD_BufferWrite>

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
 88e:	8f 81       	ldd	r24, Y+7	; 0x07
 890:	a8 0e       	add	r10, r24
 892:	b1 1c       	adc	r11, r1
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
 894:	1f 5f       	subi	r17, 0xFF	; 255
 896:	17 15       	cp	r17, r7
 898:	88 f2       	brcs	.-94     	; 0x83c <GLCD_PrintChar+0x188>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
 89a:	80 91 1a 40 	lds	r24, 0x401A	; 0x80401a <__data_end+0x8>
 89e:	81 11       	cpse	r24, r1
 8a0:	07 c0       	rjmp	.+14     	; 0x8b0 <GLCD_PrintChar+0x1fc>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
 8a2:	e2 e1       	ldi	r30, 0x12	; 18
 8a4:	f0 e4       	ldi	r31, 0x40	; 64
 8a6:	40 e0       	ldi	r20, 0x00	; 0
 8a8:	61 81       	ldd	r22, Z+1	; 0x01
 8aa:	80 81       	ld	r24, Z
 8ac:	0e 94 67 02 	call	0x4ce	; 0x4ce <GLCD_BufferWrite>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
 8b0:	85 2d       	mov	r24, r5
 8b2:	87 0d       	add	r24, r7
 8b4:	64 2d       	mov	r22, r4
 8b6:	8f 5f       	subi	r24, 0xFF	; 255
 8b8:	0e 94 cb 02 	call	0x596	; 0x596 <GLCD_GotoXY>
}
 8bc:	df 91       	pop	r29
 8be:	cf 91       	pop	r28
 8c0:	1f 91       	pop	r17
 8c2:	0f 91       	pop	r16
 8c4:	ff 90       	pop	r15
 8c6:	ef 90       	pop	r14
 8c8:	df 90       	pop	r13
 8ca:	cf 90       	pop	r12
 8cc:	bf 90       	pop	r11
 8ce:	af 90       	pop	r10
 8d0:	9f 90       	pop	r9
 8d2:	8f 90       	pop	r8
 8d4:	7f 90       	pop	r7
 8d6:	6f 90       	pop	r6
 8d8:	5f 90       	pop	r5
 8da:	4f 90       	pop	r4
 8dc:	08 95       	ret

000008de <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
 8de:	cf 93       	push	r28
 8e0:	df 93       	push	r29
 8e2:	ec 01       	movw	r28, r24
	while(*Text)
 8e4:	0d c0       	rjmp	.+26     	; 0x900 <GLCD_PrintString+0x22>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
 8e6:	e2 e1       	ldi	r30, 0x12	; 18
 8e8:	f0 e4       	ldi	r31, 0x40	; 64
 8ea:	90 81       	ld	r25, Z
 8ec:	25 81       	ldd	r18, Z+5	; 0x05
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	29 0f       	add	r18, r25
 8f2:	31 1d       	adc	r19, r1
 8f4:	20 38       	cpi	r18, 0x80	; 128
 8f6:	31 05       	cpc	r19, r1
 8f8:	34 f4       	brge	.+12     	; 0x906 <GLCD_PrintString+0x28>
			break;

		GLCD_PrintChar(*Text++);
 8fa:	21 96       	adiw	r28, 0x01	; 1
 8fc:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
 900:	88 81       	ld	r24, Y
 902:	81 11       	cpse	r24, r1
 904:	f0 cf       	rjmp	.-32     	; 0x8e6 <GLCD_PrintString+0x8>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
 906:	df 91       	pop	r29
 908:	cf 91       	pop	r28
 90a:	08 95       	ret

0000090c <sprintf>:
 90c:	0f 93       	push	r16
 90e:	1f 93       	push	r17
 910:	cf 93       	push	r28
 912:	df 93       	push	r29
 914:	cd b7       	in	r28, 0x3d	; 61
 916:	de b7       	in	r29, 0x3e	; 62
 918:	2e 97       	sbiw	r28, 0x0e	; 14
 91a:	cd bf       	out	0x3d, r28	; 61
 91c:	de bf       	out	0x3e, r29	; 62
 91e:	0d 89       	ldd	r16, Y+21	; 0x15
 920:	1e 89       	ldd	r17, Y+22	; 0x16
 922:	86 e0       	ldi	r24, 0x06	; 6
 924:	8c 83       	std	Y+4, r24	; 0x04
 926:	09 83       	std	Y+1, r16	; 0x01
 928:	1a 83       	std	Y+2, r17	; 0x02
 92a:	8f ef       	ldi	r24, 0xFF	; 255
 92c:	9f e7       	ldi	r25, 0x7F	; 127
 92e:	8d 83       	std	Y+5, r24	; 0x05
 930:	9e 83       	std	Y+6, r25	; 0x06
 932:	ae 01       	movw	r20, r28
 934:	47 5e       	subi	r20, 0xE7	; 231
 936:	5f 4f       	sbci	r21, 0xFF	; 255
 938:	6f 89       	ldd	r22, Y+23	; 0x17
 93a:	78 8d       	ldd	r23, Y+24	; 0x18
 93c:	ce 01       	movw	r24, r28
 93e:	01 96       	adiw	r24, 0x01	; 1
 940:	0e 94 af 04 	call	0x95e	; 0x95e <vfprintf>
 944:	ef 81       	ldd	r30, Y+7	; 0x07
 946:	f8 85       	ldd	r31, Y+8	; 0x08
 948:	e0 0f       	add	r30, r16
 94a:	f1 1f       	adc	r31, r17
 94c:	10 82       	st	Z, r1
 94e:	2e 96       	adiw	r28, 0x0e	; 14
 950:	cd bf       	out	0x3d, r28	; 61
 952:	de bf       	out	0x3e, r29	; 62
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	1f 91       	pop	r17
 95a:	0f 91       	pop	r16
 95c:	08 95       	ret

0000095e <vfprintf>:
 95e:	2f 92       	push	r2
 960:	3f 92       	push	r3
 962:	4f 92       	push	r4
 964:	5f 92       	push	r5
 966:	6f 92       	push	r6
 968:	7f 92       	push	r7
 96a:	8f 92       	push	r8
 96c:	9f 92       	push	r9
 96e:	af 92       	push	r10
 970:	bf 92       	push	r11
 972:	cf 92       	push	r12
 974:	df 92       	push	r13
 976:	ef 92       	push	r14
 978:	ff 92       	push	r15
 97a:	0f 93       	push	r16
 97c:	1f 93       	push	r17
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
 982:	cd b7       	in	r28, 0x3d	; 61
 984:	de b7       	in	r29, 0x3e	; 62
 986:	2b 97       	sbiw	r28, 0x0b	; 11
 988:	cd bf       	out	0x3d, r28	; 61
 98a:	de bf       	out	0x3e, r29	; 62
 98c:	6c 01       	movw	r12, r24
 98e:	7b 01       	movw	r14, r22
 990:	8a 01       	movw	r16, r20
 992:	fc 01       	movw	r30, r24
 994:	16 82       	std	Z+6, r1	; 0x06
 996:	17 82       	std	Z+7, r1	; 0x07
 998:	83 81       	ldd	r24, Z+3	; 0x03
 99a:	81 ff       	sbrs	r24, 1
 99c:	cc c1       	rjmp	.+920    	; 0xd36 <vfprintf+0x3d8>
 99e:	ce 01       	movw	r24, r28
 9a0:	01 96       	adiw	r24, 0x01	; 1
 9a2:	3c 01       	movw	r6, r24
 9a4:	f6 01       	movw	r30, r12
 9a6:	93 81       	ldd	r25, Z+3	; 0x03
 9a8:	f7 01       	movw	r30, r14
 9aa:	93 fd       	sbrc	r25, 3
 9ac:	85 91       	lpm	r24, Z+
 9ae:	93 ff       	sbrs	r25, 3
 9b0:	81 91       	ld	r24, Z+
 9b2:	7f 01       	movw	r14, r30
 9b4:	88 23       	and	r24, r24
 9b6:	09 f4       	brne	.+2      	; 0x9ba <vfprintf+0x5c>
 9b8:	ba c1       	rjmp	.+884    	; 0xd2e <vfprintf+0x3d0>
 9ba:	85 32       	cpi	r24, 0x25	; 37
 9bc:	39 f4       	brne	.+14     	; 0x9cc <vfprintf+0x6e>
 9be:	93 fd       	sbrc	r25, 3
 9c0:	85 91       	lpm	r24, Z+
 9c2:	93 ff       	sbrs	r25, 3
 9c4:	81 91       	ld	r24, Z+
 9c6:	7f 01       	movw	r14, r30
 9c8:	85 32       	cpi	r24, 0x25	; 37
 9ca:	29 f4       	brne	.+10     	; 0x9d6 <vfprintf+0x78>
 9cc:	b6 01       	movw	r22, r12
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 c9 06 	call	0xd92	; 0xd92 <fputc>
 9d4:	e7 cf       	rjmp	.-50     	; 0x9a4 <vfprintf+0x46>
 9d6:	91 2c       	mov	r9, r1
 9d8:	21 2c       	mov	r2, r1
 9da:	31 2c       	mov	r3, r1
 9dc:	ff e1       	ldi	r31, 0x1F	; 31
 9de:	f3 15       	cp	r31, r3
 9e0:	d8 f0       	brcs	.+54     	; 0xa18 <vfprintf+0xba>
 9e2:	8b 32       	cpi	r24, 0x2B	; 43
 9e4:	79 f0       	breq	.+30     	; 0xa04 <vfprintf+0xa6>
 9e6:	38 f4       	brcc	.+14     	; 0x9f6 <vfprintf+0x98>
 9e8:	80 32       	cpi	r24, 0x20	; 32
 9ea:	79 f0       	breq	.+30     	; 0xa0a <vfprintf+0xac>
 9ec:	83 32       	cpi	r24, 0x23	; 35
 9ee:	a1 f4       	brne	.+40     	; 0xa18 <vfprintf+0xba>
 9f0:	23 2d       	mov	r18, r3
 9f2:	20 61       	ori	r18, 0x10	; 16
 9f4:	1d c0       	rjmp	.+58     	; 0xa30 <vfprintf+0xd2>
 9f6:	8d 32       	cpi	r24, 0x2D	; 45
 9f8:	61 f0       	breq	.+24     	; 0xa12 <vfprintf+0xb4>
 9fa:	80 33       	cpi	r24, 0x30	; 48
 9fc:	69 f4       	brne	.+26     	; 0xa18 <vfprintf+0xba>
 9fe:	23 2d       	mov	r18, r3
 a00:	21 60       	ori	r18, 0x01	; 1
 a02:	16 c0       	rjmp	.+44     	; 0xa30 <vfprintf+0xd2>
 a04:	83 2d       	mov	r24, r3
 a06:	82 60       	ori	r24, 0x02	; 2
 a08:	38 2e       	mov	r3, r24
 a0a:	e3 2d       	mov	r30, r3
 a0c:	e4 60       	ori	r30, 0x04	; 4
 a0e:	3e 2e       	mov	r3, r30
 a10:	2a c0       	rjmp	.+84     	; 0xa66 <vfprintf+0x108>
 a12:	f3 2d       	mov	r31, r3
 a14:	f8 60       	ori	r31, 0x08	; 8
 a16:	1d c0       	rjmp	.+58     	; 0xa52 <vfprintf+0xf4>
 a18:	37 fc       	sbrc	r3, 7
 a1a:	2d c0       	rjmp	.+90     	; 0xa76 <vfprintf+0x118>
 a1c:	20 ed       	ldi	r18, 0xD0	; 208
 a1e:	28 0f       	add	r18, r24
 a20:	2a 30       	cpi	r18, 0x0A	; 10
 a22:	40 f0       	brcs	.+16     	; 0xa34 <vfprintf+0xd6>
 a24:	8e 32       	cpi	r24, 0x2E	; 46
 a26:	b9 f4       	brne	.+46     	; 0xa56 <vfprintf+0xf8>
 a28:	36 fc       	sbrc	r3, 6
 a2a:	81 c1       	rjmp	.+770    	; 0xd2e <vfprintf+0x3d0>
 a2c:	23 2d       	mov	r18, r3
 a2e:	20 64       	ori	r18, 0x40	; 64
 a30:	32 2e       	mov	r3, r18
 a32:	19 c0       	rjmp	.+50     	; 0xa66 <vfprintf+0x108>
 a34:	36 fe       	sbrs	r3, 6
 a36:	06 c0       	rjmp	.+12     	; 0xa44 <vfprintf+0xe6>
 a38:	8a e0       	ldi	r24, 0x0A	; 10
 a3a:	98 9e       	mul	r9, r24
 a3c:	20 0d       	add	r18, r0
 a3e:	11 24       	eor	r1, r1
 a40:	92 2e       	mov	r9, r18
 a42:	11 c0       	rjmp	.+34     	; 0xa66 <vfprintf+0x108>
 a44:	ea e0       	ldi	r30, 0x0A	; 10
 a46:	2e 9e       	mul	r2, r30
 a48:	20 0d       	add	r18, r0
 a4a:	11 24       	eor	r1, r1
 a4c:	22 2e       	mov	r2, r18
 a4e:	f3 2d       	mov	r31, r3
 a50:	f0 62       	ori	r31, 0x20	; 32
 a52:	3f 2e       	mov	r3, r31
 a54:	08 c0       	rjmp	.+16     	; 0xa66 <vfprintf+0x108>
 a56:	8c 36       	cpi	r24, 0x6C	; 108
 a58:	21 f4       	brne	.+8      	; 0xa62 <vfprintf+0x104>
 a5a:	83 2d       	mov	r24, r3
 a5c:	80 68       	ori	r24, 0x80	; 128
 a5e:	38 2e       	mov	r3, r24
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <vfprintf+0x108>
 a62:	88 36       	cpi	r24, 0x68	; 104
 a64:	41 f4       	brne	.+16     	; 0xa76 <vfprintf+0x118>
 a66:	f7 01       	movw	r30, r14
 a68:	93 fd       	sbrc	r25, 3
 a6a:	85 91       	lpm	r24, Z+
 a6c:	93 ff       	sbrs	r25, 3
 a6e:	81 91       	ld	r24, Z+
 a70:	7f 01       	movw	r14, r30
 a72:	81 11       	cpse	r24, r1
 a74:	b3 cf       	rjmp	.-154    	; 0x9dc <vfprintf+0x7e>
 a76:	98 2f       	mov	r25, r24
 a78:	9f 7d       	andi	r25, 0xDF	; 223
 a7a:	95 54       	subi	r25, 0x45	; 69
 a7c:	93 30       	cpi	r25, 0x03	; 3
 a7e:	28 f4       	brcc	.+10     	; 0xa8a <vfprintf+0x12c>
 a80:	0c 5f       	subi	r16, 0xFC	; 252
 a82:	1f 4f       	sbci	r17, 0xFF	; 255
 a84:	9f e3       	ldi	r25, 0x3F	; 63
 a86:	99 83       	std	Y+1, r25	; 0x01
 a88:	0d c0       	rjmp	.+26     	; 0xaa4 <vfprintf+0x146>
 a8a:	83 36       	cpi	r24, 0x63	; 99
 a8c:	31 f0       	breq	.+12     	; 0xa9a <vfprintf+0x13c>
 a8e:	83 37       	cpi	r24, 0x73	; 115
 a90:	71 f0       	breq	.+28     	; 0xaae <vfprintf+0x150>
 a92:	83 35       	cpi	r24, 0x53	; 83
 a94:	09 f0       	breq	.+2      	; 0xa98 <vfprintf+0x13a>
 a96:	59 c0       	rjmp	.+178    	; 0xb4a <vfprintf+0x1ec>
 a98:	21 c0       	rjmp	.+66     	; 0xadc <vfprintf+0x17e>
 a9a:	f8 01       	movw	r30, r16
 a9c:	80 81       	ld	r24, Z
 a9e:	89 83       	std	Y+1, r24	; 0x01
 aa0:	0e 5f       	subi	r16, 0xFE	; 254
 aa2:	1f 4f       	sbci	r17, 0xFF	; 255
 aa4:	88 24       	eor	r8, r8
 aa6:	83 94       	inc	r8
 aa8:	91 2c       	mov	r9, r1
 aaa:	53 01       	movw	r10, r6
 aac:	13 c0       	rjmp	.+38     	; 0xad4 <vfprintf+0x176>
 aae:	28 01       	movw	r4, r16
 ab0:	f2 e0       	ldi	r31, 0x02	; 2
 ab2:	4f 0e       	add	r4, r31
 ab4:	51 1c       	adc	r5, r1
 ab6:	f8 01       	movw	r30, r16
 ab8:	a0 80       	ld	r10, Z
 aba:	b1 80       	ldd	r11, Z+1	; 0x01
 abc:	36 fe       	sbrs	r3, 6
 abe:	03 c0       	rjmp	.+6      	; 0xac6 <vfprintf+0x168>
 ac0:	69 2d       	mov	r22, r9
 ac2:	70 e0       	ldi	r23, 0x00	; 0
 ac4:	02 c0       	rjmp	.+4      	; 0xaca <vfprintf+0x16c>
 ac6:	6f ef       	ldi	r22, 0xFF	; 255
 ac8:	7f ef       	ldi	r23, 0xFF	; 255
 aca:	c5 01       	movw	r24, r10
 acc:	0e 94 be 06 	call	0xd7c	; 0xd7c <strnlen>
 ad0:	4c 01       	movw	r8, r24
 ad2:	82 01       	movw	r16, r4
 ad4:	f3 2d       	mov	r31, r3
 ad6:	ff 77       	andi	r31, 0x7F	; 127
 ad8:	3f 2e       	mov	r3, r31
 ada:	16 c0       	rjmp	.+44     	; 0xb08 <vfprintf+0x1aa>
 adc:	28 01       	movw	r4, r16
 ade:	22 e0       	ldi	r18, 0x02	; 2
 ae0:	42 0e       	add	r4, r18
 ae2:	51 1c       	adc	r5, r1
 ae4:	f8 01       	movw	r30, r16
 ae6:	a0 80       	ld	r10, Z
 ae8:	b1 80       	ldd	r11, Z+1	; 0x01
 aea:	36 fe       	sbrs	r3, 6
 aec:	03 c0       	rjmp	.+6      	; 0xaf4 <vfprintf+0x196>
 aee:	69 2d       	mov	r22, r9
 af0:	70 e0       	ldi	r23, 0x00	; 0
 af2:	02 c0       	rjmp	.+4      	; 0xaf8 <vfprintf+0x19a>
 af4:	6f ef       	ldi	r22, 0xFF	; 255
 af6:	7f ef       	ldi	r23, 0xFF	; 255
 af8:	c5 01       	movw	r24, r10
 afa:	0e 94 b3 06 	call	0xd66	; 0xd66 <strnlen_P>
 afe:	4c 01       	movw	r8, r24
 b00:	f3 2d       	mov	r31, r3
 b02:	f0 68       	ori	r31, 0x80	; 128
 b04:	3f 2e       	mov	r3, r31
 b06:	82 01       	movw	r16, r4
 b08:	33 fc       	sbrc	r3, 3
 b0a:	1b c0       	rjmp	.+54     	; 0xb42 <vfprintf+0x1e4>
 b0c:	82 2d       	mov	r24, r2
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	88 16       	cp	r8, r24
 b12:	99 06       	cpc	r9, r25
 b14:	b0 f4       	brcc	.+44     	; 0xb42 <vfprintf+0x1e4>
 b16:	b6 01       	movw	r22, r12
 b18:	80 e2       	ldi	r24, 0x20	; 32
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	0e 94 c9 06 	call	0xd92	; 0xd92 <fputc>
 b20:	2a 94       	dec	r2
 b22:	f4 cf       	rjmp	.-24     	; 0xb0c <vfprintf+0x1ae>
 b24:	f5 01       	movw	r30, r10
 b26:	37 fc       	sbrc	r3, 7
 b28:	85 91       	lpm	r24, Z+
 b2a:	37 fe       	sbrs	r3, 7
 b2c:	81 91       	ld	r24, Z+
 b2e:	5f 01       	movw	r10, r30
 b30:	b6 01       	movw	r22, r12
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	0e 94 c9 06 	call	0xd92	; 0xd92 <fputc>
 b38:	21 10       	cpse	r2, r1
 b3a:	2a 94       	dec	r2
 b3c:	21 e0       	ldi	r18, 0x01	; 1
 b3e:	82 1a       	sub	r8, r18
 b40:	91 08       	sbc	r9, r1
 b42:	81 14       	cp	r8, r1
 b44:	91 04       	cpc	r9, r1
 b46:	71 f7       	brne	.-36     	; 0xb24 <vfprintf+0x1c6>
 b48:	e8 c0       	rjmp	.+464    	; 0xd1a <vfprintf+0x3bc>
 b4a:	84 36       	cpi	r24, 0x64	; 100
 b4c:	11 f0       	breq	.+4      	; 0xb52 <vfprintf+0x1f4>
 b4e:	89 36       	cpi	r24, 0x69	; 105
 b50:	41 f5       	brne	.+80     	; 0xba2 <vfprintf+0x244>
 b52:	f8 01       	movw	r30, r16
 b54:	37 fe       	sbrs	r3, 7
 b56:	07 c0       	rjmp	.+14     	; 0xb66 <vfprintf+0x208>
 b58:	60 81       	ld	r22, Z
 b5a:	71 81       	ldd	r23, Z+1	; 0x01
 b5c:	82 81       	ldd	r24, Z+2	; 0x02
 b5e:	93 81       	ldd	r25, Z+3	; 0x03
 b60:	0c 5f       	subi	r16, 0xFC	; 252
 b62:	1f 4f       	sbci	r17, 0xFF	; 255
 b64:	08 c0       	rjmp	.+16     	; 0xb76 <vfprintf+0x218>
 b66:	60 81       	ld	r22, Z
 b68:	71 81       	ldd	r23, Z+1	; 0x01
 b6a:	07 2e       	mov	r0, r23
 b6c:	00 0c       	add	r0, r0
 b6e:	88 0b       	sbc	r24, r24
 b70:	99 0b       	sbc	r25, r25
 b72:	0e 5f       	subi	r16, 0xFE	; 254
 b74:	1f 4f       	sbci	r17, 0xFF	; 255
 b76:	f3 2d       	mov	r31, r3
 b78:	ff 76       	andi	r31, 0x6F	; 111
 b7a:	3f 2e       	mov	r3, r31
 b7c:	97 ff       	sbrs	r25, 7
 b7e:	09 c0       	rjmp	.+18     	; 0xb92 <vfprintf+0x234>
 b80:	90 95       	com	r25
 b82:	80 95       	com	r24
 b84:	70 95       	com	r23
 b86:	61 95       	neg	r22
 b88:	7f 4f       	sbci	r23, 0xFF	; 255
 b8a:	8f 4f       	sbci	r24, 0xFF	; 255
 b8c:	9f 4f       	sbci	r25, 0xFF	; 255
 b8e:	f0 68       	ori	r31, 0x80	; 128
 b90:	3f 2e       	mov	r3, r31
 b92:	2a e0       	ldi	r18, 0x0A	; 10
 b94:	30 e0       	ldi	r19, 0x00	; 0
 b96:	a3 01       	movw	r20, r6
 b98:	0e 94 05 07 	call	0xe0a	; 0xe0a <__ultoa_invert>
 b9c:	88 2e       	mov	r8, r24
 b9e:	86 18       	sub	r8, r6
 ba0:	45 c0       	rjmp	.+138    	; 0xc2c <vfprintf+0x2ce>
 ba2:	85 37       	cpi	r24, 0x75	; 117
 ba4:	31 f4       	brne	.+12     	; 0xbb2 <vfprintf+0x254>
 ba6:	23 2d       	mov	r18, r3
 ba8:	2f 7e       	andi	r18, 0xEF	; 239
 baa:	b2 2e       	mov	r11, r18
 bac:	2a e0       	ldi	r18, 0x0A	; 10
 bae:	30 e0       	ldi	r19, 0x00	; 0
 bb0:	25 c0       	rjmp	.+74     	; 0xbfc <vfprintf+0x29e>
 bb2:	93 2d       	mov	r25, r3
 bb4:	99 7f       	andi	r25, 0xF9	; 249
 bb6:	b9 2e       	mov	r11, r25
 bb8:	8f 36       	cpi	r24, 0x6F	; 111
 bba:	c1 f0       	breq	.+48     	; 0xbec <vfprintf+0x28e>
 bbc:	18 f4       	brcc	.+6      	; 0xbc4 <vfprintf+0x266>
 bbe:	88 35       	cpi	r24, 0x58	; 88
 bc0:	79 f0       	breq	.+30     	; 0xbe0 <vfprintf+0x282>
 bc2:	b5 c0       	rjmp	.+362    	; 0xd2e <vfprintf+0x3d0>
 bc4:	80 37       	cpi	r24, 0x70	; 112
 bc6:	19 f0       	breq	.+6      	; 0xbce <vfprintf+0x270>
 bc8:	88 37       	cpi	r24, 0x78	; 120
 bca:	21 f0       	breq	.+8      	; 0xbd4 <vfprintf+0x276>
 bcc:	b0 c0       	rjmp	.+352    	; 0xd2e <vfprintf+0x3d0>
 bce:	e9 2f       	mov	r30, r25
 bd0:	e0 61       	ori	r30, 0x10	; 16
 bd2:	be 2e       	mov	r11, r30
 bd4:	b4 fe       	sbrs	r11, 4
 bd6:	0d c0       	rjmp	.+26     	; 0xbf2 <vfprintf+0x294>
 bd8:	fb 2d       	mov	r31, r11
 bda:	f4 60       	ori	r31, 0x04	; 4
 bdc:	bf 2e       	mov	r11, r31
 bde:	09 c0       	rjmp	.+18     	; 0xbf2 <vfprintf+0x294>
 be0:	34 fe       	sbrs	r3, 4
 be2:	0a c0       	rjmp	.+20     	; 0xbf8 <vfprintf+0x29a>
 be4:	29 2f       	mov	r18, r25
 be6:	26 60       	ori	r18, 0x06	; 6
 be8:	b2 2e       	mov	r11, r18
 bea:	06 c0       	rjmp	.+12     	; 0xbf8 <vfprintf+0x29a>
 bec:	28 e0       	ldi	r18, 0x08	; 8
 bee:	30 e0       	ldi	r19, 0x00	; 0
 bf0:	05 c0       	rjmp	.+10     	; 0xbfc <vfprintf+0x29e>
 bf2:	20 e1       	ldi	r18, 0x10	; 16
 bf4:	30 e0       	ldi	r19, 0x00	; 0
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <vfprintf+0x29e>
 bf8:	20 e1       	ldi	r18, 0x10	; 16
 bfa:	32 e0       	ldi	r19, 0x02	; 2
 bfc:	f8 01       	movw	r30, r16
 bfe:	b7 fe       	sbrs	r11, 7
 c00:	07 c0       	rjmp	.+14     	; 0xc10 <vfprintf+0x2b2>
 c02:	60 81       	ld	r22, Z
 c04:	71 81       	ldd	r23, Z+1	; 0x01
 c06:	82 81       	ldd	r24, Z+2	; 0x02
 c08:	93 81       	ldd	r25, Z+3	; 0x03
 c0a:	0c 5f       	subi	r16, 0xFC	; 252
 c0c:	1f 4f       	sbci	r17, 0xFF	; 255
 c0e:	06 c0       	rjmp	.+12     	; 0xc1c <vfprintf+0x2be>
 c10:	60 81       	ld	r22, Z
 c12:	71 81       	ldd	r23, Z+1	; 0x01
 c14:	80 e0       	ldi	r24, 0x00	; 0
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	0e 5f       	subi	r16, 0xFE	; 254
 c1a:	1f 4f       	sbci	r17, 0xFF	; 255
 c1c:	a3 01       	movw	r20, r6
 c1e:	0e 94 05 07 	call	0xe0a	; 0xe0a <__ultoa_invert>
 c22:	88 2e       	mov	r8, r24
 c24:	86 18       	sub	r8, r6
 c26:	fb 2d       	mov	r31, r11
 c28:	ff 77       	andi	r31, 0x7F	; 127
 c2a:	3f 2e       	mov	r3, r31
 c2c:	36 fe       	sbrs	r3, 6
 c2e:	0d c0       	rjmp	.+26     	; 0xc4a <vfprintf+0x2ec>
 c30:	23 2d       	mov	r18, r3
 c32:	2e 7f       	andi	r18, 0xFE	; 254
 c34:	a2 2e       	mov	r10, r18
 c36:	89 14       	cp	r8, r9
 c38:	58 f4       	brcc	.+22     	; 0xc50 <vfprintf+0x2f2>
 c3a:	34 fe       	sbrs	r3, 4
 c3c:	0b c0       	rjmp	.+22     	; 0xc54 <vfprintf+0x2f6>
 c3e:	32 fc       	sbrc	r3, 2
 c40:	09 c0       	rjmp	.+18     	; 0xc54 <vfprintf+0x2f6>
 c42:	83 2d       	mov	r24, r3
 c44:	8e 7e       	andi	r24, 0xEE	; 238
 c46:	a8 2e       	mov	r10, r24
 c48:	05 c0       	rjmp	.+10     	; 0xc54 <vfprintf+0x2f6>
 c4a:	b8 2c       	mov	r11, r8
 c4c:	a3 2c       	mov	r10, r3
 c4e:	03 c0       	rjmp	.+6      	; 0xc56 <vfprintf+0x2f8>
 c50:	b8 2c       	mov	r11, r8
 c52:	01 c0       	rjmp	.+2      	; 0xc56 <vfprintf+0x2f8>
 c54:	b9 2c       	mov	r11, r9
 c56:	a4 fe       	sbrs	r10, 4
 c58:	0f c0       	rjmp	.+30     	; 0xc78 <vfprintf+0x31a>
 c5a:	fe 01       	movw	r30, r28
 c5c:	e8 0d       	add	r30, r8
 c5e:	f1 1d       	adc	r31, r1
 c60:	80 81       	ld	r24, Z
 c62:	80 33       	cpi	r24, 0x30	; 48
 c64:	21 f4       	brne	.+8      	; 0xc6e <vfprintf+0x310>
 c66:	9a 2d       	mov	r25, r10
 c68:	99 7e       	andi	r25, 0xE9	; 233
 c6a:	a9 2e       	mov	r10, r25
 c6c:	09 c0       	rjmp	.+18     	; 0xc80 <vfprintf+0x322>
 c6e:	a2 fe       	sbrs	r10, 2
 c70:	06 c0       	rjmp	.+12     	; 0xc7e <vfprintf+0x320>
 c72:	b3 94       	inc	r11
 c74:	b3 94       	inc	r11
 c76:	04 c0       	rjmp	.+8      	; 0xc80 <vfprintf+0x322>
 c78:	8a 2d       	mov	r24, r10
 c7a:	86 78       	andi	r24, 0x86	; 134
 c7c:	09 f0       	breq	.+2      	; 0xc80 <vfprintf+0x322>
 c7e:	b3 94       	inc	r11
 c80:	a3 fc       	sbrc	r10, 3
 c82:	11 c0       	rjmp	.+34     	; 0xca6 <vfprintf+0x348>
 c84:	a0 fe       	sbrs	r10, 0
 c86:	06 c0       	rjmp	.+12     	; 0xc94 <vfprintf+0x336>
 c88:	b2 14       	cp	r11, r2
 c8a:	88 f4       	brcc	.+34     	; 0xcae <vfprintf+0x350>
 c8c:	28 0c       	add	r2, r8
 c8e:	92 2c       	mov	r9, r2
 c90:	9b 18       	sub	r9, r11
 c92:	0e c0       	rjmp	.+28     	; 0xcb0 <vfprintf+0x352>
 c94:	b2 14       	cp	r11, r2
 c96:	60 f4       	brcc	.+24     	; 0xcb0 <vfprintf+0x352>
 c98:	b6 01       	movw	r22, r12
 c9a:	80 e2       	ldi	r24, 0x20	; 32
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	0e 94 c9 06 	call	0xd92	; 0xd92 <fputc>
 ca2:	b3 94       	inc	r11
 ca4:	f7 cf       	rjmp	.-18     	; 0xc94 <vfprintf+0x336>
 ca6:	b2 14       	cp	r11, r2
 ca8:	18 f4       	brcc	.+6      	; 0xcb0 <vfprintf+0x352>
 caa:	2b 18       	sub	r2, r11
 cac:	02 c0       	rjmp	.+4      	; 0xcb2 <vfprintf+0x354>
 cae:	98 2c       	mov	r9, r8
 cb0:	21 2c       	mov	r2, r1
 cb2:	a4 fe       	sbrs	r10, 4
 cb4:	10 c0       	rjmp	.+32     	; 0xcd6 <vfprintf+0x378>
 cb6:	b6 01       	movw	r22, r12
 cb8:	80 e3       	ldi	r24, 0x30	; 48
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	0e 94 c9 06 	call	0xd92	; 0xd92 <fputc>
 cc0:	a2 fe       	sbrs	r10, 2
 cc2:	17 c0       	rjmp	.+46     	; 0xcf2 <vfprintf+0x394>
 cc4:	a1 fc       	sbrc	r10, 1
 cc6:	03 c0       	rjmp	.+6      	; 0xcce <vfprintf+0x370>
 cc8:	88 e7       	ldi	r24, 0x78	; 120
 cca:	90 e0       	ldi	r25, 0x00	; 0
 ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <vfprintf+0x374>
 cce:	88 e5       	ldi	r24, 0x58	; 88
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	b6 01       	movw	r22, r12
 cd4:	0c c0       	rjmp	.+24     	; 0xcee <vfprintf+0x390>
 cd6:	8a 2d       	mov	r24, r10
 cd8:	86 78       	andi	r24, 0x86	; 134
 cda:	59 f0       	breq	.+22     	; 0xcf2 <vfprintf+0x394>
 cdc:	a1 fe       	sbrs	r10, 1
 cde:	02 c0       	rjmp	.+4      	; 0xce4 <vfprintf+0x386>
 ce0:	8b e2       	ldi	r24, 0x2B	; 43
 ce2:	01 c0       	rjmp	.+2      	; 0xce6 <vfprintf+0x388>
 ce4:	80 e2       	ldi	r24, 0x20	; 32
 ce6:	a7 fc       	sbrc	r10, 7
 ce8:	8d e2       	ldi	r24, 0x2D	; 45
 cea:	b6 01       	movw	r22, r12
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	0e 94 c9 06 	call	0xd92	; 0xd92 <fputc>
 cf2:	89 14       	cp	r8, r9
 cf4:	38 f4       	brcc	.+14     	; 0xd04 <vfprintf+0x3a6>
 cf6:	b6 01       	movw	r22, r12
 cf8:	80 e3       	ldi	r24, 0x30	; 48
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	0e 94 c9 06 	call	0xd92	; 0xd92 <fputc>
 d00:	9a 94       	dec	r9
 d02:	f7 cf       	rjmp	.-18     	; 0xcf2 <vfprintf+0x394>
 d04:	8a 94       	dec	r8
 d06:	f3 01       	movw	r30, r6
 d08:	e8 0d       	add	r30, r8
 d0a:	f1 1d       	adc	r31, r1
 d0c:	80 81       	ld	r24, Z
 d0e:	b6 01       	movw	r22, r12
 d10:	90 e0       	ldi	r25, 0x00	; 0
 d12:	0e 94 c9 06 	call	0xd92	; 0xd92 <fputc>
 d16:	81 10       	cpse	r8, r1
 d18:	f5 cf       	rjmp	.-22     	; 0xd04 <vfprintf+0x3a6>
 d1a:	22 20       	and	r2, r2
 d1c:	09 f4       	brne	.+2      	; 0xd20 <vfprintf+0x3c2>
 d1e:	42 ce       	rjmp	.-892    	; 0x9a4 <vfprintf+0x46>
 d20:	b6 01       	movw	r22, r12
 d22:	80 e2       	ldi	r24, 0x20	; 32
 d24:	90 e0       	ldi	r25, 0x00	; 0
 d26:	0e 94 c9 06 	call	0xd92	; 0xd92 <fputc>
 d2a:	2a 94       	dec	r2
 d2c:	f6 cf       	rjmp	.-20     	; 0xd1a <vfprintf+0x3bc>
 d2e:	f6 01       	movw	r30, r12
 d30:	86 81       	ldd	r24, Z+6	; 0x06
 d32:	97 81       	ldd	r25, Z+7	; 0x07
 d34:	02 c0       	rjmp	.+4      	; 0xd3a <vfprintf+0x3dc>
 d36:	8f ef       	ldi	r24, 0xFF	; 255
 d38:	9f ef       	ldi	r25, 0xFF	; 255
 d3a:	2b 96       	adiw	r28, 0x0b	; 11
 d3c:	cd bf       	out	0x3d, r28	; 61
 d3e:	de bf       	out	0x3e, r29	; 62
 d40:	df 91       	pop	r29
 d42:	cf 91       	pop	r28
 d44:	1f 91       	pop	r17
 d46:	0f 91       	pop	r16
 d48:	ff 90       	pop	r15
 d4a:	ef 90       	pop	r14
 d4c:	df 90       	pop	r13
 d4e:	cf 90       	pop	r12
 d50:	bf 90       	pop	r11
 d52:	af 90       	pop	r10
 d54:	9f 90       	pop	r9
 d56:	8f 90       	pop	r8
 d58:	7f 90       	pop	r7
 d5a:	6f 90       	pop	r6
 d5c:	5f 90       	pop	r5
 d5e:	4f 90       	pop	r4
 d60:	3f 90       	pop	r3
 d62:	2f 90       	pop	r2
 d64:	08 95       	ret

00000d66 <strnlen_P>:
 d66:	fc 01       	movw	r30, r24
 d68:	05 90       	lpm	r0, Z+
 d6a:	61 50       	subi	r22, 0x01	; 1
 d6c:	70 40       	sbci	r23, 0x00	; 0
 d6e:	01 10       	cpse	r0, r1
 d70:	d8 f7       	brcc	.-10     	; 0xd68 <strnlen_P+0x2>
 d72:	80 95       	com	r24
 d74:	90 95       	com	r25
 d76:	8e 0f       	add	r24, r30
 d78:	9f 1f       	adc	r25, r31
 d7a:	08 95       	ret

00000d7c <strnlen>:
 d7c:	fc 01       	movw	r30, r24
 d7e:	61 50       	subi	r22, 0x01	; 1
 d80:	70 40       	sbci	r23, 0x00	; 0
 d82:	01 90       	ld	r0, Z+
 d84:	01 10       	cpse	r0, r1
 d86:	d8 f7       	brcc	.-10     	; 0xd7e <strnlen+0x2>
 d88:	80 95       	com	r24
 d8a:	90 95       	com	r25
 d8c:	8e 0f       	add	r24, r30
 d8e:	9f 1f       	adc	r25, r31
 d90:	08 95       	ret

00000d92 <fputc>:
 d92:	0f 93       	push	r16
 d94:	1f 93       	push	r17
 d96:	cf 93       	push	r28
 d98:	df 93       	push	r29
 d9a:	fb 01       	movw	r30, r22
 d9c:	23 81       	ldd	r18, Z+3	; 0x03
 d9e:	21 fd       	sbrc	r18, 1
 da0:	03 c0       	rjmp	.+6      	; 0xda8 <fputc+0x16>
 da2:	8f ef       	ldi	r24, 0xFF	; 255
 da4:	9f ef       	ldi	r25, 0xFF	; 255
 da6:	2c c0       	rjmp	.+88     	; 0xe00 <fputc+0x6e>
 da8:	22 ff       	sbrs	r18, 2
 daa:	16 c0       	rjmp	.+44     	; 0xdd8 <fputc+0x46>
 dac:	46 81       	ldd	r20, Z+6	; 0x06
 dae:	57 81       	ldd	r21, Z+7	; 0x07
 db0:	24 81       	ldd	r18, Z+4	; 0x04
 db2:	35 81       	ldd	r19, Z+5	; 0x05
 db4:	42 17       	cp	r20, r18
 db6:	53 07       	cpc	r21, r19
 db8:	44 f4       	brge	.+16     	; 0xdca <fputc+0x38>
 dba:	a0 81       	ld	r26, Z
 dbc:	b1 81       	ldd	r27, Z+1	; 0x01
 dbe:	9d 01       	movw	r18, r26
 dc0:	2f 5f       	subi	r18, 0xFF	; 255
 dc2:	3f 4f       	sbci	r19, 0xFF	; 255
 dc4:	20 83       	st	Z, r18
 dc6:	31 83       	std	Z+1, r19	; 0x01
 dc8:	8c 93       	st	X, r24
 dca:	26 81       	ldd	r18, Z+6	; 0x06
 dcc:	37 81       	ldd	r19, Z+7	; 0x07
 dce:	2f 5f       	subi	r18, 0xFF	; 255
 dd0:	3f 4f       	sbci	r19, 0xFF	; 255
 dd2:	26 83       	std	Z+6, r18	; 0x06
 dd4:	37 83       	std	Z+7, r19	; 0x07
 dd6:	14 c0       	rjmp	.+40     	; 0xe00 <fputc+0x6e>
 dd8:	8b 01       	movw	r16, r22
 dda:	ec 01       	movw	r28, r24
 ddc:	fb 01       	movw	r30, r22
 dde:	00 84       	ldd	r0, Z+8	; 0x08
 de0:	f1 85       	ldd	r31, Z+9	; 0x09
 de2:	e0 2d       	mov	r30, r0
 de4:	09 95       	icall
 de6:	89 2b       	or	r24, r25
 de8:	e1 f6       	brne	.-72     	; 0xda2 <fputc+0x10>
 dea:	d8 01       	movw	r26, r16
 dec:	16 96       	adiw	r26, 0x06	; 6
 dee:	8d 91       	ld	r24, X+
 df0:	9c 91       	ld	r25, X
 df2:	17 97       	sbiw	r26, 0x07	; 7
 df4:	01 96       	adiw	r24, 0x01	; 1
 df6:	16 96       	adiw	r26, 0x06	; 6
 df8:	8d 93       	st	X+, r24
 dfa:	9c 93       	st	X, r25
 dfc:	17 97       	sbiw	r26, 0x07	; 7
 dfe:	ce 01       	movw	r24, r28
 e00:	df 91       	pop	r29
 e02:	cf 91       	pop	r28
 e04:	1f 91       	pop	r17
 e06:	0f 91       	pop	r16
 e08:	08 95       	ret

00000e0a <__ultoa_invert>:
 e0a:	fa 01       	movw	r30, r20
 e0c:	aa 27       	eor	r26, r26
 e0e:	28 30       	cpi	r18, 0x08	; 8
 e10:	51 f1       	breq	.+84     	; 0xe66 <__ultoa_invert+0x5c>
 e12:	20 31       	cpi	r18, 0x10	; 16
 e14:	81 f1       	breq	.+96     	; 0xe76 <__ultoa_invert+0x6c>
 e16:	e8 94       	clt
 e18:	6f 93       	push	r22
 e1a:	6e 7f       	andi	r22, 0xFE	; 254
 e1c:	6e 5f       	subi	r22, 0xFE	; 254
 e1e:	7f 4f       	sbci	r23, 0xFF	; 255
 e20:	8f 4f       	sbci	r24, 0xFF	; 255
 e22:	9f 4f       	sbci	r25, 0xFF	; 255
 e24:	af 4f       	sbci	r26, 0xFF	; 255
 e26:	b1 e0       	ldi	r27, 0x01	; 1
 e28:	3e d0       	rcall	.+124    	; 0xea6 <__ultoa_invert+0x9c>
 e2a:	b4 e0       	ldi	r27, 0x04	; 4
 e2c:	3c d0       	rcall	.+120    	; 0xea6 <__ultoa_invert+0x9c>
 e2e:	67 0f       	add	r22, r23
 e30:	78 1f       	adc	r23, r24
 e32:	89 1f       	adc	r24, r25
 e34:	9a 1f       	adc	r25, r26
 e36:	a1 1d       	adc	r26, r1
 e38:	68 0f       	add	r22, r24
 e3a:	79 1f       	adc	r23, r25
 e3c:	8a 1f       	adc	r24, r26
 e3e:	91 1d       	adc	r25, r1
 e40:	a1 1d       	adc	r26, r1
 e42:	6a 0f       	add	r22, r26
 e44:	71 1d       	adc	r23, r1
 e46:	81 1d       	adc	r24, r1
 e48:	91 1d       	adc	r25, r1
 e4a:	a1 1d       	adc	r26, r1
 e4c:	20 d0       	rcall	.+64     	; 0xe8e <__ultoa_invert+0x84>
 e4e:	09 f4       	brne	.+2      	; 0xe52 <__ultoa_invert+0x48>
 e50:	68 94       	set
 e52:	3f 91       	pop	r19
 e54:	2a e0       	ldi	r18, 0x0A	; 10
 e56:	26 9f       	mul	r18, r22
 e58:	11 24       	eor	r1, r1
 e5a:	30 19       	sub	r19, r0
 e5c:	30 5d       	subi	r19, 0xD0	; 208
 e5e:	31 93       	st	Z+, r19
 e60:	de f6       	brtc	.-74     	; 0xe18 <__ultoa_invert+0xe>
 e62:	cf 01       	movw	r24, r30
 e64:	08 95       	ret
 e66:	46 2f       	mov	r20, r22
 e68:	47 70       	andi	r20, 0x07	; 7
 e6a:	40 5d       	subi	r20, 0xD0	; 208
 e6c:	41 93       	st	Z+, r20
 e6e:	b3 e0       	ldi	r27, 0x03	; 3
 e70:	0f d0       	rcall	.+30     	; 0xe90 <__ultoa_invert+0x86>
 e72:	c9 f7       	brne	.-14     	; 0xe66 <__ultoa_invert+0x5c>
 e74:	f6 cf       	rjmp	.-20     	; 0xe62 <__ultoa_invert+0x58>
 e76:	46 2f       	mov	r20, r22
 e78:	4f 70       	andi	r20, 0x0F	; 15
 e7a:	40 5d       	subi	r20, 0xD0	; 208
 e7c:	4a 33       	cpi	r20, 0x3A	; 58
 e7e:	18 f0       	brcs	.+6      	; 0xe86 <__ultoa_invert+0x7c>
 e80:	49 5d       	subi	r20, 0xD9	; 217
 e82:	31 fd       	sbrc	r19, 1
 e84:	40 52       	subi	r20, 0x20	; 32
 e86:	41 93       	st	Z+, r20
 e88:	02 d0       	rcall	.+4      	; 0xe8e <__ultoa_invert+0x84>
 e8a:	a9 f7       	brne	.-22     	; 0xe76 <__ultoa_invert+0x6c>
 e8c:	ea cf       	rjmp	.-44     	; 0xe62 <__ultoa_invert+0x58>
 e8e:	b4 e0       	ldi	r27, 0x04	; 4
 e90:	a6 95       	lsr	r26
 e92:	97 95       	ror	r25
 e94:	87 95       	ror	r24
 e96:	77 95       	ror	r23
 e98:	67 95       	ror	r22
 e9a:	ba 95       	dec	r27
 e9c:	c9 f7       	brne	.-14     	; 0xe90 <__ultoa_invert+0x86>
 e9e:	00 97       	sbiw	r24, 0x00	; 0
 ea0:	61 05       	cpc	r22, r1
 ea2:	71 05       	cpc	r23, r1
 ea4:	08 95       	ret
 ea6:	9b 01       	movw	r18, r22
 ea8:	ac 01       	movw	r20, r24
 eaa:	0a 2e       	mov	r0, r26
 eac:	06 94       	lsr	r0
 eae:	57 95       	ror	r21
 eb0:	47 95       	ror	r20
 eb2:	37 95       	ror	r19
 eb4:	27 95       	ror	r18
 eb6:	ba 95       	dec	r27
 eb8:	c9 f7       	brne	.-14     	; 0xeac <__ultoa_invert+0xa2>
 eba:	62 0f       	add	r22, r18
 ebc:	73 1f       	adc	r23, r19
 ebe:	84 1f       	adc	r24, r20
 ec0:	95 1f       	adc	r25, r21
 ec2:	a0 1d       	adc	r26, r0
 ec4:	08 95       	ret

00000ec6 <_exit>:
 ec6:	f8 94       	cli

00000ec8 <__stop_program>:
 ec8:	ff cf       	rjmp	.-2      	; 0xec8 <__stop_program>


labopdracht1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00804000  000001b8  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003438  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002eb7  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000483  00000000  00000000  000065cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00006a54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000185b  00000000  00000000  00006abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a3  00000000  00000000  00008317  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000083ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  8c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  90:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  94:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  98:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  9c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ac:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  bc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  cc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  dc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ec:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  f0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e8 eb       	ldi	r30, 0xB8	; 184
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	ac 30       	cpi	r26, 0x0C	; 12
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>
 11a:	0e 94 ca 00 	call	0x194	; 0x194 <main>
 11e:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <USART3_init>:
// USART3 is the port connected to the PC

void USART3_init(void)
{
	// AVR128DB48
	PORTB.DIRSET = PIN0_bm;										/* set pin 0 of PORT B (TXd) as output*/
 126:	e0 e2       	ldi	r30, 0x20	; 32
 128:	f4 e0       	ldi	r31, 0x04	; 4
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	81 83       	std	Z+1, r24	; 0x01
	PORTB.DIRCLR = PIN1_bm;										/* set pin 1 of PORT B (RXd) as input*/
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	82 83       	std	Z+2, r24	; 0x02
	
	USART3.BAUD = (uint16_t)(USART3_BAUD_RATE(115200));			/* set the baud rate*/
 132:	e0 e6       	ldi	r30, 0x60	; 96
 134:	f8 e0       	ldi	r31, 0x08	; 8
 136:	8b e8       	ldi	r24, 0x8B	; 139
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	80 87       	std	Z+8, r24	; 0x08
 13c:	91 87       	std	Z+9, r25	; 0x09
	
	USART3.CTRLC = USART_CHSIZE0_bm	| USART_CHSIZE1_bm;			/* set the data format to 8-bit*/
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	87 83       	std	Z+7, r24	; 0x07
	
	USART3.CTRLB |= USART_TXEN_bm;								/* enable transmitter*/
 142:	86 81       	ldd	r24, Z+6	; 0x06
 144:	80 64       	ori	r24, 0x40	; 64
 146:	86 83       	std	Z+6, r24	; 0x06
 148:	08 95       	ret

0000014a <USART3_sendChar>:
}

void USART3_sendChar(char c)
{
	while(!(USART3.STATUS & USART_DREIF_bm))
 14a:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 14e:	95 ff       	sbrs	r25, 5
 150:	fc cf       	rjmp	.-8      	; 0x14a <USART3_sendChar>
	{
		;
	}
	USART3.TXDATAL = c;
 152:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 156:	08 95       	ret

00000158 <USART3_sendString>:
}

void USART3_sendString(char *str)
{
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	8c 01       	movw	r16, r24
	for(size_t i = 0; i < strlen(str); i++)
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
 166:	07 c0       	rjmp	.+14     	; 0x176 <USART3_sendString+0x1e>
	{
		USART3_sendChar(str[i]);
 168:	f8 01       	movw	r30, r16
 16a:	ec 0f       	add	r30, r28
 16c:	fd 1f       	adc	r31, r29
 16e:	80 81       	ld	r24, Z
 170:	0e 94 a5 00 	call	0x14a	; 0x14a <USART3_sendChar>
	USART3.TXDATAL = c;
}

void USART3_sendString(char *str)
{
	for(size_t i = 0; i < strlen(str); i++)
 174:	21 96       	adiw	r28, 0x01	; 1
 176:	f8 01       	movw	r30, r16
 178:	01 90       	ld	r0, Z+
 17a:	00 20       	and	r0, r0
 17c:	e9 f7       	brne	.-6      	; 0x178 <USART3_sendString+0x20>
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	e0 1b       	sub	r30, r16
 182:	f1 0b       	sbc	r31, r17
 184:	ce 17       	cp	r28, r30
 186:	df 07       	cpc	r29, r31
 188:	78 f3       	brcs	.-34     	; 0x168 <USART3_sendString+0x10>
	{
		USART3_sendChar(str[i]);
	}
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	08 95       	ret

00000194 <main>:

int main(void)
{
	USART3_init();
 194:	0e 94 93 00 	call	0x126	; 0x126 <USART3_init>
	
	while (1)
	{
		USART3_sendString("S1215766\r\n");
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e4       	ldi	r25, 0x40	; 64
 19c:	0e 94 ac 00 	call	0x158	; 0x158 <USART3_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	84 e3       	ldi	r24, 0x34	; 52
 1a4:	9c e0       	ldi	r25, 0x0C	; 12
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x12>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x1c>
 1b0:	00 00       	nop
 1b2:	f2 cf       	rjmp	.-28     	; 0x198 <main+0x4>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
